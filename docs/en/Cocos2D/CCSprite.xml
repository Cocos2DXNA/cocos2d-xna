<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCSprite" FullName="Cocos2D.CCSprite">
  <TypeSignature Language="C#" Value="public class CCSprite : Cocos2D.CCNodeRGBA, Cocos2D.ICCTextureProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCSprite extends Cocos2D.CCNodeRGBA implements class Cocos2D.ICCBlendProtocol, class Cocos2D.ICCTextureProtocol" />
  <AssemblyInfo>
    <AssemblyName>cocos2d-xna</AssemblyName>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Cocos2D.CCNodeRGBA</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Cocos2D.ICCTextureProtocol</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary> is a 2d image ( http://en.wikipedia.org/wiki/Sprite_(computer_graphics) )</summary>
    <remarks>&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCSprite" /&gt; is a 2d image ( &lt;ulink url="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)"&gt;http://en.wikipedia.org/wiki/Sprite_(computer_graphics)&lt;/ulink&gt; )&lt;/para&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;&lt;ulink url="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)"&gt;http://en.wikipedia.org/wiki/Sprite_(computer_graphics)&lt;/ulink&gt;&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCSprite" /&gt; can be created with an image, or with a sub-rectangle of an image.&lt;/para&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;&lt;para&gt;If the parent or any of its ancestors is a &lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt; then the following features/limitations are valid&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;Features when the parent is a BatchNode:MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;LimitationsCamera is not supported yet (eg: OrbitCamera action doesn't work)GridBase actions are not supported (eg: Lens, Ripple, Twirl)The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.Parallax scroller is not supported, but can be simulated with a "proxy" sprite.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;Features when the parent is a BatchNode:MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;LimitationsCamera is not supported yet (eg: OrbitCamera action doesn't work)GridBase actions are not supported (eg: Lens, Ripple, Twirl)The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.Parallax scroller is not supported, but can be simulated with a "proxy" sprite.&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;Features when the parent is a BatchNode:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;MUCH faster rendering, specially if the SpriteBatchNode has many children. All the children will be drawn in a single batch.&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;MUCH faster rendering, specially if the &lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt; has many children. All the children will be drawn in a single batch.&lt;/para&gt;&lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;&lt;para&gt;Limitations&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;Camera is not supported yet (eg: OrbitCamera action doesn't work)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;GridBase actions are not supported (eg: Lens, Ripple, Twirl)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;Parallax scroller is not supported, but can be simulated with a "proxy" sprite.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;Camera is not supported yet (eg: OrbitCamera action doesn't work)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;GridBase actions are not supported (eg: Lens, Ripple, Twirl)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The Alias/Antialias property belongs to SpriteBatchNode, so you can't individually set the aliased property.&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The Blending function property belongs to SpriteBatchNode, so you can't individually set the blending function property.&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;Parallax scroller is not supported, but can be simulated with a "proxy" sprite.&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCCamera" /&gt; is not supported yet (eg: &lt;see cref="T:Cocos2D.CCOrbitCamera" /&gt; action doesn't work)&lt;/para&gt;&lt;see cref="T:Cocos2D.CCCamera" /&gt;&lt;see cref="T:Cocos2D.CCOrbitCamera" /&gt;&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCGridBase" /&gt; actions are not supported (eg: Lens, Ripple, &lt;see cref="T:Cocos2D.CCTwirl" /&gt;)&lt;/para&gt;&lt;see cref="T:Cocos2D.CCGridBase" /&gt;&lt;see cref="T:Cocos2D.CCTwirl" /&gt;&lt;para&gt;The Alias/Antialias property belongs to &lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;, so you can't individually set the aliased property.&lt;/para&gt;&lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;&lt;para&gt;The Blending function property belongs to &lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;, so you can't individually set the blending function property.&lt;/para&gt;&lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;&lt;para&gt;Parallax scroller is not supported, but can be simulated with a "proxy" sprite.&lt;/para&gt;&lt;para&gt;If the parent is an standard &lt;see cref="T:Cocos2D.CCNode" /&gt;, then &lt;see cref="T:Cocos2D.CCSprite" /&gt; behaves like any other &lt;see cref="T:Cocos2D.CCNode" /&gt;:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;It supports blending functions&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;It supports aliasing / antialiasing&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;But the rendering will be slower: 1 draw per children.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;It supports blending functions&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;It supports aliasing / antialiasing&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;But the rendering will be slower: 1 draw per children.&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;It supports blending functions&lt;/para&gt;&lt;para&gt;It supports aliasing / antialiasing&lt;/para&gt;&lt;para&gt;But the rendering will be slower: 1 draw per children.&lt;/para&gt;&lt;para&gt;The default anchorPoint in &lt;see cref="T:Cocos2D.CCSprite" /&gt; is (0.5, 0.5). &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a sprite with an image filename and a rect.</summary>
        <remarks>&lt;para&gt;Creates a sprite with an image filename and a rect.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;A valid sprite object that is marked as autoreleased. &lt;/para&gt;
&lt;/para&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;pszFileName&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The string wich indicates a path to image file, e.g., "scene1/monster.png" &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;rect&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Only the contents inside rect of pszFileName's texture will be applied for this sprite. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;pszFileName&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The string wich indicates a path to image file, e.g., "scene1/monster.png" &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;pszFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;pszFileName&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The string wich indicates a path to image file, e.g., "scene1/monster.png" &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The string wich indicates a path to image file, e.g., "scene1/monster.png" &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;rect&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Only the contents inside rect of pszFileName's texture will be applied for this sprite. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;rect&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;rect&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Only the contents inside rect of pszFileName's texture will be applied for this sprite. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Only the contents inside rect of pszFileName's texture will be applied for this sprite. &lt;/para&gt;&lt;para&gt;A valid sprite object that is marked as autoreleased. &lt;/para&gt;&lt;para&gt;A valid sprite object that is marked as autoreleased. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (Cocos2D.CCSpriteFrame pSpriteFrame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Cocos2D.CCSpriteFrame pSpriteFrame) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pSpriteFrame" Type="Cocos2D.CCSpriteFrame" />
      </Parameters>
      <Docs>
        <param name="pSpriteFrame">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (Cocos2D.CCTexture2D texture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Cocos2D.CCTexture2D texture) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="texture" Type="Cocos2D.CCTexture2D" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (Cocos2D.CCTexture2D texture, Cocos2D.CCRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Cocos2D.CCTexture2D texture, valuetype Cocos2D.CCRect rect) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="texture" Type="Cocos2D.CCTexture2D" />
        <Parameter Name="rect" Type="Cocos2D.CCRect" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCSprite (string fileName, Cocos2D.CCRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, valuetype Cocos2D.CCRect rect) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="rect" Type="Cocos2D.CCRect" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public override void AddChild (Cocos2D.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddChild(class Cocos2D.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">A child node </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)setZOrder(int)</param>
        <param name="tag">A interger to identify the node easily. Please refer to setTag(int)setTag(int)</param>
        <summary>Adds a child to the container with z order and tag</summary>
        <remarks>&lt;para&gt;Adds a child to the container with z order and tag&lt;/para&gt;&lt;para&gt;If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A child node &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;zOrder&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;tag&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A child node &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A child node &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A child node &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;zOrder&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;zOrder&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;zOrder&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;tag&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;tag&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;tag&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public override Cocos2D.CCPoint AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint AnchorPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the anchor point in percent.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the anchor point in percent.&lt;/para&gt;&lt;para&gt;anchorPoint is the point around which all transformations and positioning manipulations take place. It's like a pin in the node where it is "attached" to its parent. The anchorPoint is normalized, like a percentage. (0,0) means the bottom-left corner and (1,1) means the top-right corner. But you can use values higher than (1,1) and lower than (0,0) too. The default anchorPoint is (0.5,0.5), so it starts in the center of the node.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;anchorPoint&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The anchor point of node. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;anchorPoint&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The anchor point of node. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;anchorPoint&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;anchorPoint&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The anchor point of node. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The anchor point of node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="AtlasIndex">
      <MemberSignature Language="C#" Value="public int AtlasIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AtlasIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the index used on the . Don't modify this value unless you know what you are doing </summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the index used on the &lt;see cref="T:Cocos2D.CCTextureAtlas" /&gt;. &lt;para&gt;Don't modify this value unless you know what you are doing &lt;/para&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCTextureAtlas" /&gt;&lt;para&gt;Don't modify this value unless you know what you are doing &lt;/para&gt;&lt;para&gt;Don't modify this value unless you know what you are doing &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNode">
      <MemberSignature Language="C#" Value="public Cocos2D.CCSpriteBatchNode BatchNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCSpriteBatchNode BatchNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSpriteBatchNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the batch node to sprite This method is not recommended for game developers. Sample code for using batch node SpriteBatchNode*batch=SpriteBatchNode::create("Images/grossini_dance_atlas.png",15);Sprite*sprite=Sprite::createWithTexture(batch-&gt;getTexture(),Rect(0,0,57,57));batch-&gt;addChild(sprite);layer-&gt;addChild(batch);</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the batch node to sprite &lt;para&gt;This method is not recommended for game developers. Sample code for using batch node &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode&lt;sp /&gt;*batch&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Images/grossini_dance_atlas.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;,&lt;sp /&gt;15);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;ref refid="group__sprite__nodes_1ga362d1c2e2424fda68b18c63c73496943" kindref="member"&gt;Sprite&lt;/ref&gt;&lt;sp /&gt;*sprite&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture(),&lt;sp /&gt;Rect(0,&lt;sp /&gt;0,&lt;sp /&gt;57,&lt;sp /&gt;57));&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;&lt;ref refid="group__sprite__nodes_1ga5c67b2e188a06581c15a0d5eb405391e" kindref="member"&gt;addChild&lt;/ref&gt;(sprite);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;layer-&amp;gt;addChild(batch);&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt;&lt;/para&gt;&lt;/para&gt;&lt;para&gt;This method is not recommended for game developers. Sample code for using batch node &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode&lt;sp /&gt;*batch&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Images/grossini_dance_atlas.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;,&lt;sp /&gt;15);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;ref refid="group__sprite__nodes_1ga362d1c2e2424fda68b18c63c73496943" kindref="member"&gt;Sprite&lt;/ref&gt;&lt;sp /&gt;*sprite&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture(),&lt;sp /&gt;Rect(0,&lt;sp /&gt;0,&lt;sp /&gt;57,&lt;sp /&gt;57));&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;&lt;ref refid="group__sprite__nodes_1ga5c67b2e188a06581c15a0d5eb405391e" kindref="member"&gt;addChild&lt;/ref&gt;(sprite);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;layer-&amp;gt;addChild(batch);&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt;&lt;/para&gt;&lt;programlisting&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;SpriteBatchNode&lt;sp /&gt;*batch&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;
    &lt;highlight class="stringliteral"&gt;"Images/grossini_dance_atlas.png"&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;,&lt;sp /&gt;15);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;
      &lt;ref refid="group__sprite__nodes_1ga362d1c2e2424fda68b18c63c73496943" kindref="member"&gt;Sprite&lt;/ref&gt;
      &lt;sp /&gt;*sprite&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture(),&lt;sp /&gt;Rect(0,&lt;sp /&gt;0,&lt;sp /&gt;57,&lt;sp /&gt;57));&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;batch-&amp;gt;&lt;ref refid="group__sprite__nodes_1ga5c67b2e188a06581c15a0d5eb405391e" kindref="member"&gt;addChild&lt;/ref&gt;(sprite);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;layer-&amp;gt;addChild(batch);&lt;/highlight&gt;
  &lt;/codeline&gt;
&lt;/programlisting&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;SpriteBatchNode&lt;sp /&gt;*batch&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;
  &lt;highlight class="stringliteral"&gt;"Images/grossini_dance_atlas.png"&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;,&lt;sp /&gt;15);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode&lt;sp /&gt;*batch&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;&lt;highlight class="stringliteral"&gt;"Images/grossini_dance_atlas.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;,&lt;sp /&gt;15);&lt;/highlight&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;
    &lt;ref refid="group__sprite__nodes_1ga362d1c2e2424fda68b18c63c73496943" kindref="member"&gt;Sprite&lt;/ref&gt;
    &lt;sp /&gt;*sprite&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture(),&lt;sp /&gt;Rect(0,&lt;sp /&gt;0,&lt;sp /&gt;57,&lt;sp /&gt;57));&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;
  &lt;ref refid="group__sprite__nodes_1ga362d1c2e2424fda68b18c63c73496943" kindref="member"&gt;Sprite&lt;/ref&gt;
  &lt;sp /&gt;*sprite&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture(),&lt;sp /&gt;Rect(0,&lt;sp /&gt;0,&lt;sp /&gt;57,&lt;sp /&gt;57));&lt;/highlight&gt;&lt;ref refid="group__sprite__nodes_1ga362d1c2e2424fda68b18c63c73496943" kindref="member"&gt;Sprite&lt;/ref&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;batch-&amp;gt;&lt;ref refid="group__sprite__nodes_1ga5c67b2e188a06581c15a0d5eb405391e" kindref="member"&gt;addChild&lt;/ref&gt;(sprite);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;&lt;ref refid="group__sprite__nodes_1ga5c67b2e188a06581c15a0d5eb405391e" kindref="member"&gt;addChild&lt;/ref&gt;(sprite);&lt;/highlight&gt;&lt;ref refid="group__sprite__nodes_1ga5c67b2e188a06581c15a0d5eb405391e" kindref="member"&gt;addChild&lt;/ref&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;layer-&amp;gt;addChild(batch);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;layer-&amp;gt;addChild(batch);&lt;/highlight&gt;&lt;para&gt;This method is not recommended for game developers. Sample code for using batch node &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode&lt;sp /&gt;*batch&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Images/grossini_dance_atlas.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;,&lt;sp /&gt;15);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;ref refid="group__sprite__nodes_1ga362d1c2e2424fda68b18c63c73496943" kindref="member"&gt;Sprite&lt;/ref&gt;&lt;sp /&gt;*sprite&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture(),&lt;sp /&gt;Rect(0,&lt;sp /&gt;0,&lt;sp /&gt;57,&lt;sp /&gt;57));&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;&lt;ref refid="group__sprite__nodes_1ga5c67b2e188a06581c15a0d5eb405391e" kindref="member"&gt;addChild&lt;/ref&gt;(sprite);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;layer-&amp;gt;addChild(batch);&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt;&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlendFunc">
      <MemberSignature Language="C#" Value="public Cocos2D.CCBlendFunc BlendFunc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCBlendFunc BlendFunc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCBlendFunc</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the blending function that is currently being used.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the blending function that is currently being used.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;A &lt;see cref="T:Cocos2D.CCBlendFunc" /&gt; structure with source and destination factor which specified pixel arithmetic. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCBlendFunc" /&gt; structure with source and destination factor which specified pixel arithmetic. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCBlendFunc" /&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCBlendFunc" /&gt; structure with source and destination factor which specified pixel arithmetic. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public override Cocos2D.CCColor3B Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCColor3B Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCColor3B</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the color with R,G,B bytes</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the color with R,G,B bytes&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;color&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Example: Color3B(255,100,0) means R=255, G=100, B=0 &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;color&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Example: Color3B(255,100,0) means R=255, G=100, B=0 &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;color&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;color&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Example: Color3B(255,100,0) means R=255, G=100, B=0 &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Example: Color3B(255,100,0) means R=255, G=100, B=0 &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public override void Deserialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Deserialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dirty">
      <MemberSignature Language="C#" Value="public virtual bool Dirty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Dirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Makes the  to be updated in the Atlas. </summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Makes the &lt;see cref="T:Cocos2D.CCSprite" /&gt; to be updated in the Atlas. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayFrame">
      <MemberSignature Language="C#" Value="public Cocos2D.CCSpriteFrame DisplayFrame { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCSpriteFrame DisplayFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSpriteFrame</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current displayed frame. </summary>
        <value>To be added.</value>
        <remarks>Returns the current displayed frame. </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public override void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method to draw your own node. The following GL states will be enabled by default:glEnableClientState(GL_VERTEX_ARRAY);glEnableClientState(GL_COLOR_ARRAY);glEnableClientState(GL_TEXTURE_COORD_ARRAY);glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. </summary>
        <remarks>&lt;para&gt;Override this method to draw your own node. The following GL states will be enabled by default:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/para&gt;&lt;para&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/para&gt;&lt;para&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/para&gt;&lt;para&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipX">
      <MemberSignature Language="C#" Value="public bool FlipX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FlipX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the sprite should be flipped horizontally or not.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets whether the sprite should be flipped horizontally or not.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;bFlipX&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if the sprite should be flipped horizaontally, false otherwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;bFlipX&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if the sprite should be flipped horizaontally, false otherwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;bFlipX&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;bFlipX&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if the sprite should be flipped horizaontally, false otherwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if the sprite should be flipped horizaontally, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipY">
      <MemberSignature Language="C#" Value="public bool FlipY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FlipY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the sprite should be flipped vertically or not.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets whether the sprite should be flipped vertically or not.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;bFlipY&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if the sprite should be flipped vertically, flase otherwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;bFlipY&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if the sprite should be flipped vertically, flase otherwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;bFlipY&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;bFlipY&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if the sprite should be flipped vertically, flase otherwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if the sprite should be flipped vertically, flase otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreAnchorPointForPosition">
      <MemberSignature Language="C#" Value="public override bool IgnoreAnchorPointForPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreAnchorPointForPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the anchor point will be (0,0) when you position this node.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets whether the anchor point will be (0,0) when you position this node.&lt;/para&gt;&lt;para&gt;This is an internal method, only used by &lt;see cref="T:Cocos2D.CCLayer" /&gt; and &lt;see cref="T:Cocos2D.CCScene" /&gt;. Don't call it outside framework. The default value is false, while in &lt;see cref="T:Cocos2D.CCLayer" /&gt; and &lt;see cref="T:Cocos2D.CCScene" /&gt; are true&lt;/para&gt;&lt;see cref="T:Cocos2D.CCLayer" /&gt;&lt;see cref="T:Cocos2D.CCScene" /&gt;&lt;see cref="T:Cocos2D.CCLayer" /&gt;&lt;see cref="T:Cocos2D.CCScene" /&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;ignore&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;ignore&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;ignore&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;ignore&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public override bool Init ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Init() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes an empty sprite with nothing init. </summary>
        <returns>To be added.</returns>
        <remarks>Initializes an empty sprite with nothing init. </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithFile">
      <MemberSignature Language="C#" Value="public virtual bool InitWithFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InitWithFile(string fileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The path to an image file in local file system. </param>
        <summary>Initializes a sprite with an image filename, and a rect.</summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Initializes a sprite with an image filename, and a rect.&lt;/para&gt;&lt;para&gt;This method will find pszFilename from local file system, load its content to &lt;see cref="T:Cocos2D.CCTexture2D" /&gt;, then use &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; to create a sprite. After initialization, the offset will be (0,0).&lt;/para&gt;&lt;see cref="T:Cocos2D.CCTexture2D" /&gt;&lt;see cref="T:Cocos2D.CCTexture2D" /&gt;&lt;para&gt;
  &lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;
&lt;/para&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;pszFilename&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The path to an image file in local file system. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;rect&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The rectangle assigned the content area from texture. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;pszFilename&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The path to an image file in local file system. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;pszFilename&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;pszFilename&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The path to an image file in local file system. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The path to an image file in local file system. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;rect&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The rectangle assigned the content area from texture. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;rect&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;rect&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The rectangle assigned the content area from texture. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The rectangle assigned the content area from texture. &lt;/para&gt;&lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;&lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithFile">
      <MemberSignature Language="C#" Value="protected virtual bool InitWithFile (string fileName, Cocos2D.CCRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool InitWithFile(string fileName, valuetype Cocos2D.CCRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="rect" Type="Cocos2D.CCRect" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithSpriteFrame">
      <MemberSignature Language="C#" Value="protected virtual bool InitWithSpriteFrame (Cocos2D.CCSpriteFrame pSpriteFrame);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool InitWithSpriteFrame(class Cocos2D.CCSpriteFrame pSpriteFrame) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pSpriteFrame" Type="Cocos2D.CCSpriteFrame" />
      </Parameters>
      <Docs>
        <param name="pSpriteFrame">A  object. It should includes a valid texture and a rect </param>
        <summary>Initializes a sprite with an . The texture and rect in  will be applied on this sprite</summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Initializes a sprite with an &lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt;. The texture and rect in &lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt; will be applied on this sprite&lt;/para&gt;&lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt;&lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt;&lt;para&gt;
  &lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;
&lt;/para&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;pSpriteFrame&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A &lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt; object. It should includes a valid texture and a rect &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;pSpriteFrame&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A &lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt; object. It should includes a valid texture and a rect &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;pSpriteFrame&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;pSpriteFrame&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A &lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt; object. It should includes a valid texture and a rect &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt; object. It should includes a valid texture and a rect &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt;&lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;&lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithTexture">
      <MemberSignature Language="C#" Value="public virtual bool InitWithTexture (Cocos2D.CCTexture2D texture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InitWithTexture(class Cocos2D.CCTexture2D texture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="Cocos2D.CCTexture2D" />
      </Parameters>
      <Docs>
        <param name="texture">A  object whose texture will be applied to this sprite. </param>
        <summary>Initializes a sprite with a texture and a rect in points, optionally rotated.</summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Initializes a sprite with a texture and a rect in points, optionally rotated.&lt;/para&gt;&lt;para&gt;After initialization, the offset will be (0,0). &lt;para&gt;This is the designated initializer.&lt;/para&gt;&lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;&lt;/para&gt;&lt;para&gt;This is the designated initializer.&lt;/para&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;pTexture&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object whose texture will be applied to this sprite. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;rect&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A rectangle assigned the contents of texture. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;rotated&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Whether or not the texture rectangle is rotated. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;pTexture&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object whose texture will be applied to this sprite. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;pTexture&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;pTexture&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object whose texture will be applied to this sprite. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object whose texture will be applied to this sprite. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCTexture2D" /&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;rect&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A rectangle assigned the contents of texture. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;rect&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;rect&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A rectangle assigned the contents of texture. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A rectangle assigned the contents of texture. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;rotated&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Whether or not the texture rectangle is rotated. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;rotated&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;rotated&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Whether or not the texture rectangle is rotated. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Whether or not the texture rectangle is rotated. &lt;/para&gt;&lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;&lt;para&gt;This is the designated initializer.&lt;/para&gt;&lt;para&gt;true if the sprite is initialized properly, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithTexture">
      <MemberSignature Language="C#" Value="public virtual bool InitWithTexture (Cocos2D.CCTexture2D texture, Cocos2D.CCRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InitWithTexture(class Cocos2D.CCTexture2D texture, valuetype Cocos2D.CCRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="Cocos2D.CCTexture2D" />
        <Parameter Name="rect" Type="Cocos2D.CCRect" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithTexture">
      <MemberSignature Language="C#" Value="public bool InitWithTexture (Cocos2D.CCTexture2D pTexture, Cocos2D.CCRect rect, bool rotated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InitWithTexture(class Cocos2D.CCTexture2D pTexture, valuetype Cocos2D.CCRect rect, bool rotated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTexture" Type="Cocos2D.CCTexture2D" />
        <Parameter Name="rect" Type="Cocos2D.CCRect" />
        <Parameter Name="rotated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pTexture">To be added.</param>
        <param name="rect">To be added.</param>
        <param name="rotated">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFrameDisplayed">
      <MemberSignature Language="C#" Value="public bool IsFrameDisplayed (Cocos2D.CCSpriteFrame pFrame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsFrameDisplayed(class Cocos2D.CCSpriteFrame pFrame) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pFrame" Type="Cocos2D.CCSpriteFrame" />
      </Parameters>
      <Docs>
        <param name="pFrame">To be added.</param>
        <summary>Returns whether or not a  is being displayed </summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Returns whether or not a &lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt; is being displayed &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSpriteFrame" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpacityModifyRGB">
      <MemberSignature Language="C#" Value="public override bool IsOpacityModifyRGB { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpacityModifyRGB" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not the opacity will be applied using glColor(R,G,B,opacity) or glColor(opacity, opacity, opacity, opacity)</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns whether or not the opacity will be applied using glColor(R,G,B,opacity) or glColor(opacity, opacity, opacity, opacity)&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;Returns opacity modify flag. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;Returns opacity modify flag. &lt;/para&gt;&lt;para&gt;Returns opacity modify flag. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTextureRectRotated">
      <MemberSignature Language="C#" Value="public bool IsTextureRectRotated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextureRectRotated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not the texture rectangle is rotated. </summary>
        <value>To be added.</value>
        <remarks>Returns whether or not the texture rectangle is rotated. </remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bDirty">
      <MemberSignature Language="C#" Value="protected bool m_bDirty;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bFlipX">
      <MemberSignature Language="C#" Value="protected bool m_bFlipX;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bFlipX" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bFlipY">
      <MemberSignature Language="C#" Value="protected bool m_bFlipY;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bFlipY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bHasChildren">
      <MemberSignature Language="C#" Value="protected bool m_bHasChildren;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bHasChildren" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bOpacityModifyRGB">
      <MemberSignature Language="C#" Value="protected bool m_bOpacityModifyRGB;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bOpacityModifyRGB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bRectRotated">
      <MemberSignature Language="C#" Value="protected bool m_bRectRotated;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bRectRotated" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bRecursiveDirty">
      <MemberSignature Language="C#" Value="protected bool m_bRecursiveDirty;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bRecursiveDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bShouldBeHidden">
      <MemberSignature Language="C#" Value="protected bool m_bShouldBeHidden;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bShouldBeHidden" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obOffsetPosition">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obOffsetPosition;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obOffsetPosition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obRect">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCRect m_obRect;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCRect m_obRect" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obUnflippedOffsetPositionFromCenter">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obUnflippedOffsetPositionFromCenter;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obUnflippedOffsetPositionFromCenter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pobBatchNode">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCSpriteBatchNode m_pobBatchNode;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCSpriteBatchNode m_pobBatchNode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSpriteBatchNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pobTexture">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCTexture2D m_pobTexture;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCTexture2D m_pobTexture" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCTexture2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pobTextureAtlas">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCTextureAtlas m_pobTextureAtlas;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCTextureAtlas m_pobTextureAtlas" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCTextureAtlas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_sBlendFunc">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCBlendFunc m_sBlendFunc;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCBlendFunc m_sBlendFunc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCBlendFunc</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_transformToBatch">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCAffineTransform m_transformToBatch;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCAffineTransform m_transformToBatch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_uAtlasIndex">
      <MemberSignature Language="C#" Value="protected int m_uAtlasIndex;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 m_uAtlasIndex" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetPosition">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint OffsetPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint OffsetPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the offset position of the sprite. Calculated automatically by editors like Zwoptex. </summary>
        <value>To be added.</value>
        <remarks>Gets the offset position of the sprite. Calculated automatically by editors like Zwoptex. </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public override byte Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the opacity.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the opacity.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;value&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Goes from 0 to 255, where 255 means fully opaque and 0 means fully transparent. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;value&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Goes from 0 to 255, where 255 means fully opaque and 0 means fully transparent. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;value&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Goes from 0 to 255, where 255 means fully opaque and 0 means fully transparent. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Goes from 0 to 255, where 255 means fully opaque and 0 means fully transparent. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override Cocos2D.CCPoint Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the position (x,y) of the node in OpenGL coordinates</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the position (x,y) of the node in OpenGL coordinates&lt;/para&gt;&lt;para&gt;Usually we use Point(x,y) to compose Point object. The original point (0,0) is at the left-bottom corner of screen. For example, this codesnip sets the node in the center of screen. &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;Size&lt;sp /&gt;size&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member"&gt;Director::getInstance&lt;/ref&gt;()-&amp;gt;&lt;ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member"&gt;getWinSize&lt;/ref&gt;();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;node-&amp;gt;setPosition(&lt;sp /&gt;Point(size.width/2,&lt;sp /&gt;size.height/2)&lt;sp /&gt;)&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt;&lt;/para&gt;&lt;programlisting&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;Size&lt;sp /&gt;size&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member"&gt;Director::getInstance&lt;/ref&gt;()-&amp;gt;&lt;ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member"&gt;getWinSize&lt;/ref&gt;();&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;node-&amp;gt;setPosition(&lt;sp /&gt;Point(size.width/2,&lt;sp /&gt;size.height/2)&lt;sp /&gt;)&lt;/highlight&gt;
  &lt;/codeline&gt;
&lt;/programlisting&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;Size&lt;sp /&gt;size&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member"&gt;Director::getInstance&lt;/ref&gt;()-&amp;gt;&lt;ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member"&gt;getWinSize&lt;/ref&gt;();&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;Size&lt;sp /&gt;size&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member"&gt;Director::getInstance&lt;/ref&gt;()-&amp;gt;&lt;ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member"&gt;getWinSize&lt;/ref&gt;();&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;ref refid="classcocos2d_1_1_director_1a84db77ae2c0d36de8ff7f7a99f6aad47" kindref="member"&gt;Director::getInstance&lt;/ref&gt;&lt;ref refid="classcocos2d_1_1_director_1a760fff09a5469c8e8be57257df312695" kindref="member"&gt;getWinSize&lt;/ref&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;node-&amp;gt;setPosition(&lt;sp /&gt;Point(size.width/2,&lt;sp /&gt;size.height/2)&lt;sp /&gt;)&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;node-&amp;gt;setPosition(&lt;sp /&gt;Point(size.width/2,&lt;sp /&gt;size.height/2)&lt;sp /&gt;)&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;position&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The position (x,y) of the node in OpenGL coordinates &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;position&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The position (x,y) of the node in OpenGL coordinates &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;position&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;position&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The position (x,y) of the node in OpenGL coordinates &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The position (x,y) of the node in OpenGL coordinates &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Quad">
      <MemberSignature Language="C#" Value="public Cocos2D.CCV3F_C4B_T2F_Quad Quad { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCV3F_C4B_T2F_Quad Quad" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCV3F_C4B_T2F_Quad</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the quad (tex coords, vertex coords and color) information. </summary>
        <value>To be added.</value>
        <remarks>Returns the quad (tex coords, vertex coords and color) information. </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildrenWithCleanup">
      <MemberSignature Language="C#" Value="public override void RemoveAllChildrenWithCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveAllChildrenWithCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">true if all running actions on all children nodes should be cleanup, false oterwise. </param>
        <summary>Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.</summary>
        <remarks>&lt;para&gt;Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public override void RemoveChild (Cocos2D.CCNode child, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveChild(class Cocos2D.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The child node which will be removed. </param>
        <param name="cleanup">true if all running actions and callbacks on the child node will be cleanup, false otherwise. </param>
        <summary>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</summary>
        <remarks>&lt;para&gt;Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The child node which will be removed. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The child node which will be removed. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The child node which will be removed. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The child node which will be removed. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderChild">
      <MemberSignature Language="C#" Value="public override void ReorderChild (Cocos2D.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ReorderChild(class Cocos2D.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">An already added child node. It MUST be already added. </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)setZOrder(int)</param>
        <summary>Reorders a child according to a new z value.</summary>
        <remarks>&lt;para&gt;Reorders a child according to a new z value.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;zOrder&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;zOrder&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;zOrder&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;zOrder&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public override float Rotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the rotation (angle) of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the rotation (angle) of the node in degrees.&lt;/para&gt;&lt;para&gt;0 is the default rotation angle. Positive values rotate node clockwise, and negative values for anti-clockwise.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;rotation&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The rotation of the node in degrees. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;rotation&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The rotation of the node in degrees. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;rotation&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;rotation&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The rotation of the node in degrees. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The rotation of the node in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationX">
      <MemberSignature Language="C#" Value="public override float RotationX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the X rotation (angle) of the node in degrees which performs a horizontal rotational skew.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the X rotation (angle) of the node in degrees which performs a horizontal rotational skew.&lt;/para&gt;&lt;para&gt;0 is the default rotation angle. Positive values rotate node clockwise, and negative values for anti-clockwise.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;fRotationX&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The X rotation in degrees which performs a horizontal rotational skew. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;fRotationX&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The X rotation in degrees which performs a horizontal rotational skew. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;fRotationX&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;fRotationX&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The X rotation in degrees which performs a horizontal rotational skew. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The X rotation in degrees which performs a horizontal rotational skew. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationY">
      <MemberSignature Language="C#" Value="public override float RotationY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.&lt;/para&gt;&lt;para&gt;0 is the default rotation angle. Positive values rotate node clockwise, and negative values for anti-clockwise.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;fRotationY&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The Y rotation in degrees. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;fRotationY&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The Y rotation in degrees. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;fRotationY&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;fRotationY&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The Y rotation in degrees. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The Y rotation in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public override float Scale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes both X and Y scale factor of the node.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes both X and Y scale factor of the node.&lt;/para&gt;&lt;para&gt;1.0 is the default scale factor. It modifies the X and Y scale at the same time.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;scale&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The scale factor for both X and Y axis. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;scale&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The scale factor for both X and Y axis. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;scale&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;scale&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The scale factor for both X and Y axis. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The scale factor for both X and Y axis. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleX">
      <MemberSignature Language="C#" Value="public override float ScaleX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the scale factor on X axis of this node</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the scale factor on X axis of this node&lt;/para&gt;&lt;para&gt;The deafult value is 1.0 if you haven't changed it before&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;fScaleX&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The scale factor on X axis. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;fScaleX&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The scale factor on X axis. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;fScaleX&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;fScaleX&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The scale factor on X axis. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The scale factor on X axis. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleY">
      <MemberSignature Language="C#" Value="public override float ScaleY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the scale factor on Y axis of this node</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the scale factor on Y axis of this node&lt;/para&gt;&lt;para&gt;The Default value is 1.0 if you haven't changed it before.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;fScaleY&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The scale factor on Y axis. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;fScaleY&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The scale factor on Y axis. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;fScaleY&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;fScaleY&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The scale factor on Y axis. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The scale factor on Y axis. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public override void Serialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Serialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDirtyRecursively">
      <MemberSignature Language="C#" Value="public virtual void SetDirtyRecursively (bool bValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDirtyRecursively(bool bValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDisplayFrameWithAnimationName">
      <MemberSignature Language="C#" Value="public void SetDisplayFrameWithAnimationName (string animationName, int frameIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDisplayFrameWithAnimationName(string animationName, int32 frameIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animationName" Type="System.String" />
        <Parameter Name="frameIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="animationName">To be added.</param>
        <param name="frameIndex">To be added.</param>
        <summary>Changes the display frame with animation name and index. The animation name will be get from the </summary>
        <remarks>&lt;para&gt;Changes the display frame with animation name and index. The animation name will be get from the &lt;see cref="T:Cocos2D.CCAnimationCache" /&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCAnimationCache" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReorderChildDirtyRecursively">
      <MemberSignature Language="C#" Value="public virtual void SetReorderChildDirtyRecursively ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetReorderChildDirtyRecursively() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTextureRect">
      <MemberSignature Language="C#" Value="public void SetTextureRect (Cocos2D.CCRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTextureRect(valuetype Cocos2D.CCRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Cocos2D.CCRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>Sets the texture rect, rectRotated and untrimmed size of the  in points. It will update the texture coordinates and the vertex rectangle. </summary>
        <remarks>&lt;para&gt;Sets the texture rect, rectRotated and untrimmed size of the &lt;see cref="T:Cocos2D.CCSprite" /&gt; in points. It will update the texture coordinates and the vertex rectangle. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTextureRect">
      <MemberSignature Language="C#" Value="public void SetTextureRect (Cocos2D.CCRect value, bool rotated, Cocos2D.CCSize untrimmedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTextureRect(valuetype Cocos2D.CCRect value, bool rotated, valuetype Cocos2D.CCSize untrimmedSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Cocos2D.CCRect" />
        <Parameter Name="rotated" Type="System.Boolean" />
        <Parameter Name="untrimmedSize" Type="Cocos2D.CCSize" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="rotated">To be added.</param>
        <param name="untrimmedSize">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexRect">
      <MemberSignature Language="C#" Value="protected virtual void SetVertexRect (Cocos2D.CCRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetVertexRect(valuetype Cocos2D.CCRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Cocos2D.CCRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>Sets the vertex rect. It will be called internally by setTextureRect. Useful if you want to create 2x images from SD images in Retina Display. Do not call it manually. Use setTextureRect instead. </summary>
        <remarks>Sets the vertex rect. It will be called internally by setTextureRect. Useful if you want to create 2x images from SD images in Retina Display. Do not call it manually. Use setTextureRect instead. </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewX">
      <MemberSignature Language="C#" Value="public override float SkewX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the X skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the X skew angle of the node in degrees.&lt;/para&gt;&lt;para&gt;This angle describes the shear distortion in the X direction. Thus, it is the angle between the Y axis and the left edge of the shape The default skewX angle is 0. Positive values distort the node in a CW direction.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;fSkewX&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The X skew angle of the node in degrees. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;fSkewX&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The X skew angle of the node in degrees. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;fSkewX&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;fSkewX&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The X skew angle of the node in degrees. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The X skew angle of the node in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewY">
      <MemberSignature Language="C#" Value="public override float SkewY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the Y skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the Y skew angle of the node in degrees.&lt;/para&gt;&lt;para&gt;This angle describes the shear distortion in the Y direction. Thus, it is the angle between the X axis and the bottom edge of the shape The default skewY angle is 0. Positive values distort the node in a CCW direction.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;fSkewY&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The Y skew angle of the node in degrees. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;fSkewY&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The Y skew angle of the node in degrees. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;fSkewY&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;fSkewY&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The Y skew angle of the node in degrees. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The Y skew angle of the node in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SortAllChildren">
      <MemberSignature Language="C#" Value="public override void SortAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SortAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the children array once before drawing, instead of every time when a child is added or reordered. This appraoch can improves the performance massively. Don't call this manually unless a child added needs to be removed in the same frame </summary>
        <remarks>&lt;para&gt;Sorts the children array once before drawing, instead of every time when a child is added or reordered. This appraoch can improves the performance massively. &lt;para&gt;Don't call this manually unless a child added needs to be removed in the same frame &lt;/para&gt;&lt;/para&gt;&lt;para&gt;Don't call this manually unless a child added needs to be removed in the same frame &lt;/para&gt;&lt;para&gt;Don't call this manually unless a child added needs to be removed in the same frame &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Texture">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCTexture2D Texture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCTexture2D Texture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCTexture2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the currently used texture</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the currently used texture&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;The texture that is currenlty being used. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;The texture that is currenlty being used. &lt;/para&gt;&lt;para&gt;The texture that is currenlty being used. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureRect">
      <MemberSignature Language="C#" Value="public Cocos2D.CCRect TextureRect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCRect TextureRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the rect of the  in points </summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the rect of the &lt;see cref="T:Cocos2D.CCSprite" /&gt; in points &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateBlendFunc">
      <MemberSignature Language="C#" Value="protected void UpdateBlendFunc ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBlendFunc() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDisplayedColor">
      <MemberSignature Language="C#" Value="public override void UpdateDisplayedColor (Cocos2D.CCColor3B parentColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpdateDisplayedColor(valuetype Cocos2D.CCColor3B parentColor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentColor" Type="Cocos2D.CCColor3B" />
      </Parameters>
      <Docs>
        <param name="parentColor">To be added.</param>
        <summary>recursive method that updates display color </summary>
        <remarks>recursive method that updates display color </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDisplayedOpacity">
      <MemberSignature Language="C#" Value="public override void UpdateDisplayedOpacity (byte parentOpacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpdateDisplayedOpacity(unsigned int8 parentOpacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentOpacity" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="parentOpacity">To be added.</param>
        <summary>recursive method that updates the displayed opacity. </summary>
        <remarks>recursive method that updates the displayed opacity. </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTransform">
      <MemberSignature Language="C#" Value="public override void UpdateTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpdateTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the quad according the rotation, position, scale values. </summary>
        <remarks>Updates the quad according the rotation, position, scale values. </remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexZ">
      <MemberSignature Language="C#" Value="public override float VertexZ { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 VertexZ" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the real OpenGL Z vertex.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the real OpenGL Z vertex.&lt;/para&gt;&lt;para&gt;Differences between openGL Z vertex and &lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt; Z order:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;OpenGL Z modifies the Z vertex, and not the Z order in the relation between parent-children&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;OpenGL Z might require to set 2D projection&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;cocos2d Z order works OK if all the nodes uses the same openGL Z vertex. eg: vertexZ = 0&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;OpenGL Z modifies the Z vertex, and not the Z order in the relation between parent-children&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;OpenGL Z might require to set 2D projection&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;cocos2d Z order works OK if all the nodes uses the same openGL Z vertex. eg: vertexZ = 0&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;OpenGL Z modifies the Z vertex, and not the Z order in the relation between parent-children&lt;/para&gt;&lt;para&gt;OpenGL Z might require to set 2D projection&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt; Z order works OK if all the nodes uses the same openGL Z vertex. eg: vertexZ = 0&lt;/para&gt;&lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt;&lt;para&gt;
  &lt;para&gt;Use it at your own risk since it might break the &lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt; parent-children z order&lt;/para&gt;
&lt;/para&gt;&lt;para&gt;Use it at your own risk since it might break the &lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt; parent-children z order&lt;/para&gt;&lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;fVertexZ&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;OpenGL Z vertex of this node. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;fVertexZ&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;OpenGL Z vertex of this node. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;fVertexZ&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;fVertexZ&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;OpenGL Z vertex of this node. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;OpenGL Z vertex of this node. &lt;/para&gt;&lt;para&gt;Use it at your own risk since it might break the &lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt; parent-children z order&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the node is visible</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets whether the node is visible&lt;/para&gt;&lt;para&gt;The default value is true, a node is default to visible&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;visible&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;visible&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;visible&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;visible&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
  </Members>
</Type>