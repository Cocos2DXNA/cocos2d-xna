<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCParallaxNode" FullName="Cocos2D.CCParallaxNode">
  <TypeSignature Language="C#" Value="public class CCParallaxNode : Cocos2D.CCNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCParallaxNode extends Cocos2D.CCNode" />
  <AssemblyInfo>
    <AssemblyName>cocos2d-xna</AssemblyName>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Cocos2D.CCNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCParallaxNode" /&gt;: A node that simulates a parallax scroller. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCParallaxNode" /&gt;</summary>
    <remarks>The children will be moved faster / slower than the parent according the the parallax ratio. </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCParallaxNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public override void AddChild (Cocos2D.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddChild(class Cocos2D.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">A child node </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)setZOrder(int)</param>
        <param name="tag">A interger to identify the node easily. Please refer to setTag(int)setTag(int)</param>
        <summary>Adds a child to the container with z order and tag</summary>
        <remarks>&lt;para&gt;Adds a child to the container with z order and tag&lt;/para&gt;&lt;para&gt;If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A child node &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;zOrder&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;tag&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A child node &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A child node &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A child node &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;zOrder&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;zOrder&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;zOrder&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;tag&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;tag&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;tag&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (Cocos2D.CCNode child, int z, Cocos2D.CCPoint ratio, Cocos2D.CCPoint offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class Cocos2D.CCNode child, int32 z, valuetype Cocos2D.CCPoint ratio, valuetype Cocos2D.CCPoint offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="z" Type="System.Int32" />
        <Parameter Name="ratio" Type="Cocos2D.CCPoint" />
        <Parameter Name="offset" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="z">To be added.</param>
        <param name="ratio">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pParallaxArray">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.List&lt;Cocos2D.CCPointObject&gt; m_pParallaxArray;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Generic.List`1&lt;class Cocos2D.CCPointObject&gt; m_pParallaxArray" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Cocos2D.CCPointObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_tLastPosition">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_tLastPosition;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_tLastPosition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParallaxArray">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;Cocos2D.CCPointObject&gt; ParallaxArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class Cocos2D.CCPointObject&gt; ParallaxArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Cocos2D.CCPointObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildrenWithCleanup">
      <MemberSignature Language="C#" Value="public override void RemoveAllChildrenWithCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveAllChildrenWithCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">true if all running actions on all children nodes should be cleanup, false oterwise. </param>
        <summary>Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.</summary>
        <remarks>&lt;para&gt;Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public override void RemoveChild (Cocos2D.CCNode child, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveChild(class Cocos2D.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The child node which will be removed. </param>
        <param name="cleanup">true if all running actions and callbacks on the child node will be cleanup, false otherwise. </param>
        <summary>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</summary>
        <remarks>&lt;para&gt;Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The child node which will be removed. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The child node which will be removed. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The child node which will be removed. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The child node which will be removed. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visits this node's children and draw them recursively. </summary>
        <remarks>Visits this node's children and draw them recursively. </remarks>
      </Docs>
    </Member>
  </Members>
</Type>