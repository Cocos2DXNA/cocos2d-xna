<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCDisplayLinkDirector" FullName="Cocos2D.CCDisplayLinkDirector">
  <TypeSignature Language="C#" Value="public class CCDisplayLinkDirector : Cocos2D.CCDirector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCDisplayLinkDirector extends Cocos2D.CCDirector" />
  <AssemblyInfo>
    <AssemblyName>cocos2d-xna</AssemblyName>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Cocos2D.CCDirector</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCDisplayLinkDirector" /&gt; is a &lt;see cref="T:Cocos2D.CCDirector" /&gt; that synchronizes timers with the refresh rate of the display. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCDisplayLinkDirector" /&gt;&lt;see cref="T:Cocos2D.CCDirector" /&gt;</summary>
    <remarks>&lt;para&gt;Features and Limitations:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;Scheduled timers &amp;amp; drawing are synchronizes with the refresh rate of the display&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;Only supports animation intervals of 1/60 1/30 &amp;amp; 1/15&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;Scheduled timers &amp;amp; drawing are synchronizes with the refresh rate of the display&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;Only supports animation intervals of 1/60 1/30 &amp;amp; 1/15&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;Scheduled timers &amp;amp; drawing are synchronizes with the refresh rate of the display&lt;/para&gt;&lt;para&gt;Only supports animation intervals of 1/60 1/30 &amp;amp; 1/15&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;v0.8.2 &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;v0.8.2 &lt;/para&gt;&lt;para&gt;v0.8.2 &lt;/para&gt;</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCDisplayLinkDirector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationInterval">
      <MemberSignature Language="C#" Value="public override double AnimationInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 AnimationInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set the FPS value. </summary>
        <value>To be added.</value>
        <remarks>Set the FPS value. </remarks>
      </Docs>
    </Member>
    <Member MemberName="MainLoop">
      <MemberSignature Language="C#" Value="public override void MainLoop (Microsoft.Xna.Framework.GameTime gameTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MainLoop(class Microsoft.Xna.Framework.GameTime gameTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameTime" Type="Microsoft.Xna.Framework.GameTime" />
      </Parameters>
      <Docs>
        <param name="gameTime">To be added.</param>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnimation">
      <MemberSignature Language="C#" Value="public override void StartAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StartAnimation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The main loop is triggered again. Call this function only if [stopAnimation] was called earlier Don't call this function to start the main loop. To run the main loop call runWithScene </summary>
        <remarks>&lt;para&gt;The main loop is triggered again. Call this function only if [stopAnimation] was called earlier &lt;para&gt;Don't call this function to start the main loop. To run the main loop call runWithScene &lt;/para&gt;&lt;/para&gt;&lt;para&gt;Don't call this function to start the main loop. To run the main loop call runWithScene &lt;/para&gt;&lt;para&gt;Don't call this function to start the main loop. To run the main loop call runWithScene &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAnimation">
      <MemberSignature Language="C#" Value="public override void StopAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StopAnimation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the animation. Nothing will be drawn. The main loop won't be triggered anymore. If you don't want to pause your animation call [pause] instead. </summary>
        <remarks>Stops the animation. Nothing will be drawn. The main loop won't be triggered anymore. If you don't want to pause your animation call [pause] instead. </remarks>
      </Docs>
    </Member>
  </Members>
</Type>