<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCParticleBatchNode" FullName="Cocos2D.CCParticleBatchNode">
  <TypeSignature Language="C#" Value="public class CCParticleBatchNode : Cocos2D.CCNode, Cocos2D.ICCTextureProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCParticleBatchNode extends Cocos2D.CCNode implements class Cocos2D.ICCBlendProtocol, class Cocos2D.ICCTextureProtocol" />
  <AssemblyInfo>
    <AssemblyName>cocos2d-xna</AssemblyName>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Cocos2D.CCNode</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Cocos2D.ICCTextureProtocol</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary> is like a batch node: if it contains children, it will draw them in 1 single OpenGL call (often known as "batch draw").</summary>
    <remarks>&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt; is like a batch node: if it contains children, it will draw them in 1 single OpenGL call (often known as "batch draw").&lt;/para&gt;&lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt; can reference one and only one texture (one image file, one texture atlas). Only the ParticleSystems that are contained in that texture can be added to the &lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;. All ParticleSystems added to a &lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt; are drawn in one OpenGL ES draw call. If the ParticleSystems are not added to a &lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt; then an OpenGL ES draw call will be needed for each one, which is less efficient.&lt;/para&gt;&lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt;&lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;&lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;&lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt;&lt;para&gt;Limitations:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;At the moment only ParticleSystemQuad is supported&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;All systems need to be drawn with the same parameters, blend function, aliasing, texture&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;At the moment only ParticleSystemQuad is supported&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;All systems need to be drawn with the same parameters, blend function, aliasing, texture&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;At the moment only &lt;see cref="T:Cocos2D.CCParticleSystemQuad" /&gt; is supported&lt;/para&gt;&lt;see cref="T:Cocos2D.CCParticleSystemQuad" /&gt;&lt;para&gt;All systems need to be drawn with the same parameters, blend function, aliasing, texture&lt;/para&gt;&lt;para&gt;Most efficient usage&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;Initialize the ParticleBatchNode with the texture and enough capacity for all the particle systems&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;Initialize all particle systems and add them as child to the batch node v1.1 &lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;Initialize the ParticleBatchNode with the texture and enough capacity for all the particle systems&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;Initialize all particle systems and add them as child to the batch node v1.1 &lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;Initialize the &lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt; with the texture and enough capacity for all the particle systems&lt;/para&gt;&lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt;&lt;para&gt;Initialize all particle systems and add them as child to the batch node &lt;para&gt;v1.1 &lt;/para&gt;&lt;/para&gt;&lt;para&gt;v1.1 &lt;/para&gt;&lt;para&gt;v1.1 &lt;/para&gt;</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCParticleBatchNode (Cocos2D.CCTexture2D tex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Cocos2D.CCTexture2D tex) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tex" Type="Cocos2D.CCTexture2D" />
      </Parameters>
      <Docs>
        <param name="tex">To be added.</param>
        <summary>initializes the particle system with the name of a file on disk (for a list of supported formats look at the  class), a capacity of particles </summary>
        <remarks>&lt;para&gt;initializes the particle system with the name of a file on disk (for a list of supported formats look at the &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; class), a capacity of particles &lt;/para&gt;&lt;see cref="T:Cocos2D.CCTexture2D" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCParticleBatchNode (Cocos2D.CCTexture2D tex, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Cocos2D.CCTexture2D tex, int32 capacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tex" Type="Cocos2D.CCTexture2D" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tex">To be added.</param>
        <param name="capacity">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCParticleBatchNode (string imageFile, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string imageFile, int32 capacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="imageFile" Type="System.String" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="imageFile">To be added.</param>
        <param name="capacity">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public override void AddChild (Cocos2D.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddChild(class Cocos2D.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">A child node </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)setZOrder(int)</param>
        <param name="tag">A interger to identify the node easily. Please refer to setTag(int)setTag(int)</param>
        <summary>Adds a child to the container with z order and tag</summary>
        <remarks>&lt;para&gt;Adds a child to the container with z order and tag&lt;/para&gt;&lt;para&gt;If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A child node &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;zOrder&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;tag&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A child node &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A child node &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A child node &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;zOrder&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;zOrder&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;zOrder&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;tag&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;tag&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;tag&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlendFunc">
      <MemberSignature Language="C#" Value="public Cocos2D.CCBlendFunc BlendFunc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCBlendFunc BlendFunc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCBlendFunc</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the blending function that is currently being used.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the blending function that is currently being used.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;A &lt;see cref="T:Cocos2D.CCBlendFunc" /&gt; structure with source and destination factor which specified pixel arithmetic. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCBlendFunc" /&gt; structure with source and destination factor which specified pixel arithmetic. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCBlendFunc" /&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCBlendFunc" /&gt; structure with source and destination factor which specified pixel arithmetic. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableParticle">
      <MemberSignature Language="C#" Value="public void DisableParticle (int particleIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableParticle(int32 particleIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="particleIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="particleIndex">To be added.</param>
        <summary>disables a particle by inserting a 0'd quad into the texture atlas </summary>
        <remarks>disables a particle by inserting a 0'd quad into the texture atlas </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public override void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method to draw your own node. The following GL states will be enabled by default:glEnableClientState(GL_VERTEX_ARRAY);glEnableClientState(GL_COLOR_ARRAY);glEnableClientState(GL_TEXTURE_COORD_ARRAY);glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. </summary>
        <remarks>&lt;para&gt;Override this method to draw your own node. The following GL states will be enabled by default:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/para&gt;&lt;para&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/para&gt;&lt;para&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/para&gt;&lt;para&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithFile">
      <MemberSignature Language="C#" Value="public bool InitWithFile (string fileImage, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InitWithFile(string fileImage, int32 capacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileImage" Type="System.String" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileImage">To be added.</param>
        <param name="capacity">To be added.</param>
        <summary>initializes the particle system with the name of a file on disk (for a list of supported formats look at the  class), a capacity of particles </summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;initializes the particle system with the name of a file on disk (for a list of supported formats look at the &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; class), a capacity of particles &lt;/para&gt;&lt;see cref="T:Cocos2D.CCTexture2D" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitWithTexture">
      <MemberSignature Language="C#" Value="public bool InitWithTexture (Cocos2D.CCTexture2D tex, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InitWithTexture(class Cocos2D.CCTexture2D tex, int32 capacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tex" Type="Cocos2D.CCTexture2D" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tex">To be added.</param>
        <param name="capacity">To be added.</param>
        <summary>initializes the particle system with , a capacity of particles </summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;initializes the particle system with &lt;see cref="T:Cocos2D.CCTexture2D" /&gt;, a capacity of particles &lt;/para&gt;&lt;see cref="T:Cocos2D.CCTexture2D" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="kCCParticleDefaultCapacity">
      <MemberSignature Language="C#" Value="public const int kCCParticleDefaultCapacity = 500;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 kCCParticleDefaultCapacity = (500)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>500</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildrenWithCleanup">
      <MemberSignature Language="C#" Value="public override void RemoveAllChildrenWithCleanup (bool doCleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveAllChildrenWithCleanup(bool doCleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doCleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="doCleanup">true if all running actions on all children nodes should be cleanup, false oterwise. </param>
        <summary>Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.</summary>
        <remarks>&lt;para&gt;Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public override void RemoveChild (Cocos2D.CCNode child, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveChild(class Cocos2D.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>remove child from the </summary>
        <remarks>&lt;para&gt;remove child from the &lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCParticleBatchNode" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildAtIndex">
      <MemberSignature Language="C#" Value="public void RemoveChildAtIndex (int index, bool doCleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChildAtIndex(int32 index, bool doCleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="doCleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="doCleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderChild">
      <MemberSignature Language="C#" Value="public override void ReorderChild (Cocos2D.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ReorderChild(class Cocos2D.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">An already added child node. It MUST be already added. </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)setZOrder(int)</param>
        <summary>Reorders a child according to a new z value.</summary>
        <remarks>&lt;para&gt;Reorders a child according to a new z value.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;zOrder&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;zOrder&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;zOrder&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;zOrder&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Texture">
      <MemberSignature Language="C#" Value="public Cocos2D.CCTexture2D Texture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCTexture2D Texture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCTexture2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets a new texuture. It will be retained.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets a new texuture. It will be retained.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;texture&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A valid &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object, which will be applied to this sprite object. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;texture&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A valid &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object, which will be applied to this sprite object. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;texture&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;texture&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A valid &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object, which will be applied to this sprite object. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A valid &lt;see cref="T:Cocos2D.CCTexture2D" /&gt; object, which will be applied to this sprite object. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCTexture2D" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureAtlas">
      <MemberSignature Language="C#" Value="public readonly Cocos2D.CCTextureAtlas TextureAtlas;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly class Cocos2D.CCTextureAtlas TextureAtlas" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCTextureAtlas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visits this node's children and draw them recursively. </summary>
        <remarks>Visits this node's children and draw them recursively. </remarks>
      </Docs>
    </Member>
  </Members>
</Type>