<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCNode" FullName="Cocos2D.CCNode">
  <TypeSignature Language="C#" Value="public class CCNode : Cocos2D.ICCFocusable, Cocos2D.ICCSelectorProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCNode extends System.Object implements class Cocos2D.ICCFocusable, class Cocos2D.ICCSelectorProtocol" />
  <AssemblyInfo>
    <AssemblyName>cocos2d-xna</AssemblyName>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Cocos2D.ICCFocusable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Cocos2D.ICCSelectorProtocol</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para> is the main element. Anything that gets drawn or contains things that get drawn is a . The most popular Nodes are: , , , . </para>
    </summary>
    <remarks>
      <para>The main features of a <see cref="T:Cocos2D.CCNode" /> are:<list type="bullet" /></para>
      <see cref="T:Cocos2D.CCNode" />
      <list type="bullet" />
      <para>Some <see cref="T:Cocos2D.CCNode" /> nodes provide extra functionality for them or their children.</para>
      <see cref="T:Cocos2D.CCNode" />
      <para>Subclassing a <see cref="T:Cocos2D.CCNode" /> usually means (one/all) of:<list type="bullet" /></para>
      <see cref="T:Cocos2D.CCNode" />
      <list type="bullet" />
      <para>Features of <see cref="T:Cocos2D.CCNode" />:<list type="bullet" /></para>
      <see cref="T:Cocos2D.CCNode" />
      <list type="bullet" />
      <para>Default values:<list type="bullet" /></para>
      <list type="bullet" />
      <para>Limitations:<list type="bullet" /></para>
      <list type="bullet" />
      <para>Order in transformations with grid disabled<list type="number" /></para>
      <list type="number" />
      <para>Order in transformations with grid enabled<list type="number" /></para>
      <list type="number" />
      <para>
        <see cref="T:Cocos2D.CCCamera" />:<list type="bullet" /></para>
      <see cref="T:Cocos2D.CCCamera" />
      <list type="bullet" />
      <item>
        <description>They can contain other Node nodes (addChild, getChildByTag, removeChild, etc)</description>
      </item>
      <description>They can contain other Node nodes (addChild, getChildByTag, removeChild, etc)</description>
      <item>
        <description>They can schedule periodic callback (schedule, unschedule, etc)</description>
      </item>
      <description>They can schedule periodic callback (schedule, unschedule, etc)</description>
      <item>
        <description>They can execute actions (runAction, stopAction, etc)</description>
      </item>
      <description>They can execute actions (runAction, stopAction, etc)</description>
      <item>
        <description>overriding init to initialize resources and schedule callbacks</description>
      </item>
      <description>overriding init to initialize resources and schedule callbacks</description>
      <item>
        <description>create callbacks to handle the advancement of time</description>
      </item>
      <description>create callbacks to handle the advancement of time</description>
      <item>
        <description>overriding draw to render the node</description>
      </item>
      <description>overriding draw to render the node</description>
      <item>
        <description>position</description>
      </item>
      <description>position</description>
      <item>
        <description>scale (x, y)</description>
      </item>
      <description>scale (x, y)</description>
      <item>
        <description>rotation (in degrees, clockwise)</description>
      </item>
      <description>rotation (in degrees, clockwise)</description>
      <item>
        <description>Camera (an interface to gluLookAt )</description>
      </item>
      <description>Camera (an interface to gluLookAt )</description>
      <item>
        <description>GridBase (to do mesh transformations)</description>
      </item>
      <description>GridBase (to do mesh transformations)</description>
      <item>
        <description>anchor point</description>
      </item>
      <description>anchor point</description>
      <item>
        <description>size</description>
      </item>
      <description>size</description>
      <item>
        <description>visible</description>
      </item>
      <description>visible</description>
      <item>
        <description>z-order</description>
      </item>
      <description>z-order</description>
      <item>
        <description>openGL z position</description>
      </item>
      <description>openGL z position</description>
      <item>
        <description>rotation: 0</description>
      </item>
      <description>rotation: 0</description>
      <item>
        <description>position: (x=0,y=0)</description>
      </item>
      <description>position: (x=0,y=0)</description>
      <item>
        <description>scale: (x=1,y=1)</description>
      </item>
      <description>scale: (x=1,y=1)</description>
      <item>
        <description>contentSize: (x=0,y=0)</description>
      </item>
      <description>contentSize: (x=0,y=0)</description>
      <item>
        <description>anchorPoint: (x=0,y=0)</description>
      </item>
      <description>anchorPoint: (x=0,y=0)</description>
      <item>
        <description>A Node is a "void" object. It doesn't have a texture</description>
      </item>
      <description>A Node is a "void" object. It doesn't have a texture</description>
      <item>
        <description>The node will be translated (position)</description>
      </item>
      <description>The node will be translated (position)</description>
      <item>
        <description>The node will be rotated (rotation)</description>
      </item>
      <description>The node will be rotated (rotation)</description>
      <item>
        <description>The node will be scaled (scale)</description>
      </item>
      <description>The node will be scaled (scale)</description>
      <item>
        <description>The node will be moved according to the camera values (camera)</description>
      </item>
      <description>The node will be moved according to the camera values (camera)</description>
      <item>
        <description>The node will be translated (position)</description>
      </item>
      <description>The node will be translated (position)</description>
      <item>
        <description>The node will be rotated (rotation)</description>
      </item>
      <description>The node will be rotated (rotation)</description>
      <item>
        <description>The node will be scaled (scale)</description>
      </item>
      <description>The node will be scaled (scale)</description>
      <item>
        <description>The grid will capture the screen</description>
      </item>
      <description>The grid will capture the screen</description>
      <item>
        <description>The node will be moved according to the camera values (camera)</description>
      </item>
      <description>The node will be moved according to the camera values (camera)</description>
      <item>
        <description>The grid will render the captured screen</description>
      </item>
      <description>The grid will render the captured screen</description>
      <item>
        <description>Each node has a camera. By default it points to the center of the Node. </description>
      </item>
      <description>Each node has a camera. By default it points to the center of the Node. </description>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Allocates and initializes a node. A initialized node which is marked as "autorelease". </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ActionManager">
      <MemberSignature Language="C#" Value="public Cocos2D.CCActionManager ActionManager { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCActionManager ActionManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCActionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the  object that is used by all actions. setActionManager(ActionManager*)A  object. </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (Cocos2D.CCNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class Cocos2D.CCNode child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
      </Parameters>
      <Docs>
        <param name="child">A child node </param>
        <summary>Adds a child to the container with z order and tag</summary>
        <remarks>
          <para>Adds a child to the container with z order and tag</para>
          <para>If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (Cocos2D.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class Cocos2D.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (Cocos2D.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class Cocos2D.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zOrder">To be added.</param>
        <param name="tag">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdditionalTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform AdditionalTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCAffineTransform AdditionalTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the additional transform.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets the additional transform.</para>
          <para>
            <para>The additional transform will be concatenated at the end of nodeToParentTransform. It could be used to simulate <computeroutput>parent-child</computeroutput> relationship between two nodes (e.g. one is in BatchNode, another isn't). <programlisting><codeline><highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight><highlight class="stringliteral">"Icon-114.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight><highlight class="stringliteral">"Icon-72.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//position</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//scale</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setScale(2);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//rotation</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setRotation(20);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline></programlisting></para>
          </para>
          <para>The additional transform will be concatenated at the end of nodeToParentTransform. It could be used to simulate <computeroutput>parent-child</computeroutput> relationship between two nodes (e.g. one is in BatchNode, another isn't). <programlisting><codeline><highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight><highlight class="stringliteral">"Icon-114.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight></codeline><codeline><highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight><highlight class="stringliteral">"Icon-72.png"</highlight><highlight class="normal">);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//position</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//scale</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setScale(2);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//rotation</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteA-&gt;setRotation(20);</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight></codeline><codeline><highlight class="normal"></highlight></codeline><codeline><highlight class="normal"></highlight><highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight><highlight class="normal"></highlight></codeline><codeline><highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight></codeline></programlisting></para>
          <computeroutput>parent-child</computeroutput>
          <programlisting>
            <codeline>
              <highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight>
              <highlight class="stringliteral">"Icon-114.png"</highlight>
              <highlight class="normal">);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight>
              <highlight class="stringliteral">"Icon-72.png"</highlight>
              <highlight class="normal">);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//position</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//scale</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteA-&gt;setScale(2);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//rotation</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteA-&gt;setRotation(20);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal"></highlight>
              <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="comment">//<sp />create<sp />a<sp />batchNode</highlight>
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight>
            <highlight class="stringliteral">"Icon-114.png"</highlight>
            <highlight class="normal">);</highlight>
          </codeline>
          <highlight class="normal">SpriteBatchNode*<sp />batch=<sp /><ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>(</highlight>
          <sp />
          <sp />
          <ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member">SpriteBatchNode::create</ref>
          <highlight class="stringliteral">"Icon-114.png"</highlight>
          <highlight class="normal">);</highlight>
          <codeline>
            <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight>
          </codeline>
          <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(batch);</highlight>
          <ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />create<sp />two<sp />sprites,<sp />spriteA<sp />will<sp />be<sp />added<sp />to<sp />batchNode,<sp />they<sp />are<sp />using<sp />different<sp />textures.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight>
          </codeline>
          <highlight class="normal">Sprite*<sp />spriteA<sp />=<sp /><ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>(batch-&gt;getTexture());</highlight>
          <sp />
          <sp />
          <sp />
          <ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member">Sprite::createWithTexture</ref>
          <codeline>
            <highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight>
            <highlight class="stringliteral">"Icon-72.png"</highlight>
            <highlight class="normal">);</highlight>
          </codeline>
          <highlight class="normal">Sprite*<sp />spriteB<sp />=<sp /><ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>(</highlight>
          <sp />
          <sp />
          <sp />
          <ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member">Sprite::create</ref>
          <highlight class="stringliteral">"Icon-72.png"</highlight>
          <highlight class="normal">);</highlight>
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight>
          </codeline>
          <highlight class="normal">batch-&gt;addChild(spriteA);<sp /></highlight>
          <sp />
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />We<sp />can't<sp />make<sp />spriteB<sp />as<sp />spriteA's<sp />child<sp />since<sp />they<sp />use<sp />different<sp />textures.<sp />So<sp />just<sp />add<sp />it<sp />to<sp />layer.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />But<sp />we<sp />want<sp />to<sp />simulate<sp />`parent-child`<sp />relationship<sp />for<sp />these<sp />two<sp />node.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight>
          </codeline>
          <highlight class="normal">this-&gt;<ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>(spriteB);<sp /></highlight>
          <ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member">addChild</ref>
          <sp />
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//position</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//position</highlight>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight>
          </codeline>
          <highlight class="normal">spriteA-&gt;setPosition(Point(200,<sp />200));</highlight>
          <sp />
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          </codeline>
          <highlight class="normal">AffineTransform<sp />t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />postion<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          </codeline>
          <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//scale</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//scale</highlight>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">spriteA-&gt;setScale(2);</highlight>
          </codeline>
          <highlight class="normal">spriteA-&gt;setScale(2);</highlight>
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          </codeline>
          <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          <sp />
          <sp />
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />scale<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          </codeline>
          <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//rotation</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//rotation</highlight>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">spriteA-&gt;setRotation(20);</highlight>
          </codeline>
          <highlight class="normal">spriteA-&gt;setRotation(20);</highlight>
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />Gets<sp />the<sp />spriteA's<sp />transform.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          </codeline>
          <highlight class="normal">t<sp />=<sp />spriteA-&gt;nodeToParentTransform();</highlight>
          <sp />
          <sp />
          <codeline>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal"></highlight>
            <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="normal"></highlight>
          <highlight class="comment">//<sp />Sets<sp />the<sp />additional<sp />transform<sp />to<sp />spriteB,<sp />spriteB's<sp />rotation<sp />will<sp />based<sp />on<sp />its<sp />pseudo<sp />parent<sp />i.e.<sp />spriteA.</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
          </codeline>
          <highlight class="normal">spriteB-&gt;setAdditionalTransform(t);</highlight>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCPoint AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint AnchorPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the anchor point in percent.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the anchor point in percent.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1gad48a1317c06899426910afb04c3f6d50" kindref="member">setAnchorPoint(const Point&amp;)</ref>
            </para>
            <para>The anchor point of node. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1gad48a1317c06899426910afb04c3f6d50" kindref="member">setAnchorPoint(const Point&amp;)</ref>
          </para>
          <ref refid="group__base__nodes_1gad48a1317c06899426910afb04c3f6d50" kindref="member">setAnchorPoint(const Point&amp;)</ref>
          <para>The anchor point of node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPointInPoints">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCPoint AnchorPointInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint AnchorPointInPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the anchorPoint in absolute pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the anchorPoint in absolute pixels.</para>
          <para>
            <para>You can only read it. If you wish to modify it, use anchorPoint instead. </para>
            <para>
              <ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member">getAnchorPoint()</ref>
            </para>
            <para>The anchor point in absolute pixels. </para>
          </para>
          <para>You can only read it. If you wish to modify it, use anchorPoint instead. </para>
          <para>
            <ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member">getAnchorPoint()</ref>
          </para>
          <ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member">getAnchorPoint()</ref>
          <para>The anchor point in absolute pixels. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public Cocos2D.CCRect BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCRect BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a "local" axis aligned bounding box of the node. The returned box is relative only to its parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a "local" axis aligned bounding box of the node. The returned box is relative only to its parent.</para>
          <para>
            <para>This method returns a temporaty variable, so it can't returns const Rect&amp; </para>
          </para>
          <para>This method returns a temporaty variable, so it can't returns const Rect&amp; </para>
          <para>
            <para>A "local" axis aligned boudning box of the node. </para>
          </para>
          <para>A "local" axis aligned boudning box of the node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBoxInPixels">
      <MemberSignature Language="C#" Value="public Cocos2D.CCRect BoundingBoxInPixels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCRect BoundingBoxInPixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Camera">
      <MemberSignature Language="C#" Value="public Cocos2D.CCCamera Camera { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCCamera Camera" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a camera object that lets you move the node using a gluLookAt</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a camera object that lets you move the node using a gluLookAt</para>
          <para>
            <programlisting>
              <codeline>
                <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
              </codeline>
              <codeline>
                <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
              </codeline>
              <codeline>
                <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
              </codeline>
            </programlisting>
          </para>
          <programlisting>
            <codeline>
              <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
          </codeline>
          <highlight class="normal">Camera*<sp />camera<sp />=<sp />node-&gt;getCamera();</highlight>
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
          </codeline>
          <highlight class="normal">camera-&gt;setEyeXYZ(0,<sp />0,<sp />415/2);</highlight>
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
          </codeline>
          <highlight class="normal">camera-&gt;setCenterXYZ(0,<sp />0,<sp />0);</highlight>
          <sp />
          <sp />
          <para>
            <para>A <see cref="T:Cocos2D.CCCamera" /> object that lets you move the node using a gluLookAt </para>
          </para>
          <para>A <see cref="T:Cocos2D.CCCamera" /> object that lets you move the node using a gluLookAt </para>
          <see cref="T:Cocos2D.CCCamera" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReceiveFocus">
      <MemberSignature Language="C#" Value="public virtual bool CanReceiveFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReceiveFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCRawList`1&lt;class Cocos2D.CCNode&gt; Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an array of children</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return an array of children</para>
          <para>Composing a "tree" structure is a very important feature of <see cref="T:Cocos2D.CCNode" /> Here's a sample code of traversing children array: <programlisting><codeline><highlight class="normal"><ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight></codeline><codeline><highlight class="normal"><ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight></codeline><codeline><highlight class="normal">{</highlight></codeline><codeline><highlight class="normal"><sp /><sp /><sp /><sp />node-&gt;setPosition(0,0);</highlight></codeline><codeline><highlight class="normal">}</highlight></codeline></programlisting> This sample code traverses all children nodes, and set theie position to (0,0)</para>
          <see cref="T:Cocos2D.CCNode" />
          <programlisting>
            <codeline>
              <highlight class="normal">
                <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
                <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">{</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">
                <sp />
                <sp />
                <sp />
                <sp />node-&gt;setPosition(0,0);</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">}</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="normal">
              <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight>
          </codeline>
          <highlight class="normal">
            <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>*<sp />node<sp />=<sp />NULL;</highlight>
          <ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member">Node</ref>
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">
              <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight>
          </codeline>
          <highlight class="normal">
            <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>(parent-&gt;getChildren(),<sp />node)</highlight>
          <ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member">CCARRAY_FOREACH</ref>
          <sp />
          <codeline>
            <highlight class="normal">{</highlight>
          </codeline>
          <highlight class="normal">{</highlight>
          <codeline>
            <highlight class="normal">
              <sp />
              <sp />
              <sp />
              <sp />node-&gt;setPosition(0,0);</highlight>
          </codeline>
          <highlight class="normal">
            <sp />
            <sp />
            <sp />
            <sp />node-&gt;setPosition(0,0);</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">}</highlight>
          </codeline>
          <highlight class="normal">}</highlight>
          <para>
            <para>An array of children </para>
          </para>
          <para>An array of children </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildrenCount">
      <MemberSignature Language="C#" Value="public int ChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the amount of children.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Get the amount of children.</para>
          <para>
            <para>The amount of children. </para>
          </para>
          <para>The amount of children. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cleanup">
      <MemberSignature Language="C#" Value="public virtual void Cleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cleanup() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops all running actions and schedulers </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ContentSize">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCSize ContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCSize ContentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the untransformed size of the node.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the untransformed size of the node.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member">setContentSize(const Size&amp;)</ref>
            </para>
            <para>The untransformed size of the node. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member">setContentSize(const Size&amp;)</ref>
          </para>
          <ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member">setContentSize(const Size&amp;)</ref>
          <para>The untransformed size of the node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSizeInPixels">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCSize ContentSizeInPixels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCSize ContentSizeInPixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToNodeSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToNodeSpace (Cocos2D.CCPoint worldPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToNodeSpace(valuetype Cocos2D.CCPoint worldPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worldPoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="worldPoint">To be added.</param>
        <summary>Converts a Point to node (local) space coordinates. The result is in Points. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ConvertToNodeSpaceAr">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToNodeSpaceAr (Cocos2D.CCPoint worldPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToNodeSpaceAr(valuetype Cocos2D.CCPoint worldPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worldPoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="worldPoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTouchToNodeSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertTouchToNodeSpace (Cocos2D.CCTouch touch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertTouchToNodeSpace(class Cocos2D.CCTouch touch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="Cocos2D.CCTouch" />
      </Parameters>
      <Docs>
        <param name="touch">To be added.</param>
        <summary>convenience methods which take a Touch instead of Point </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ConvertTouchToNodeSpaceAr">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertTouchToNodeSpaceAr (Cocos2D.CCTouch touch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertTouchToNodeSpaceAr(class Cocos2D.CCTouch touch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="Cocos2D.CCTouch" />
      </Parameters>
      <Docs>
        <param name="touch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWindowSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToWindowSpace (Cocos2D.CCPoint nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToWindowSpace(valuetype Cocos2D.CCPoint nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>
          <para>Convert cocos2d coordinates to UI windows coordinate. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToWorldSpace (Cocos2D.CCPoint nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToWorldSpace(valuetype Cocos2D.CCPoint nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>Converts a Point to world space coordinates. The result is in Points. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldSpaceAr">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToWorldSpaceAr (Cocos2D.CCPoint nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToWorldSpaceAr(valuetype Cocos2D.CCPoint nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual void Deserialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deserialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method to draw your own node. The following GL states will be enabled by default:</summary>
        <remarks>
          <para>Override this method to draw your own node. The following GL states will be enabled by default:<list type="bullet" /></para>
          <list type="bullet" />
          <item>
            <description>glEnableClientState(GL_VERTEX_ARRAY);</description>
          </item>
          <description>glEnableClientState(GL_VERTEX_ARRAY);</description>
          <item>
            <description>glEnableClientState(GL_COLOR_ARRAY);</description>
          </item>
          <description>glEnableClientState(GL_COLOR_ARRAY);</description>
          <item>
            <description>glEnableClientState(GL_TEXTURE_COORD_ARRAY);</description>
          </item>
          <description>glEnableClientState(GL_TEXTURE_COORD_ARRAY);</description>
          <item>
            <description>glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. </description>
          </item>
          <description>glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. </description>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CCNode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionByTag">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAction GetActionByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Cocos2D.CCAction GetActionByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>Gets an action from the running action list by its tag.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Gets an action from the running action list by its tag.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member">setTag(int)</ref>, <ref refid="group__base__nodes_1ga79da575d4c240206a788d996300ec967" kindref="member">getTag()</ref>.</para>
            <para>The action object with the given tag. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member">setTag(int)</ref>, <ref refid="group__base__nodes_1ga79da575d4c240206a788d996300ec967" kindref="member">getTag()</ref>.</para>
          <ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member">setTag(int)</ref>
          <ref refid="group__base__nodes_1ga79da575d4c240206a788d996300ec967" kindref="member">getTag()</ref>
          <para>The action object with the given tag. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildByTag">
      <MemberSignature Language="C#" Value="public Cocos2D.CCNode GetChildByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Cocos2D.CCNode GetChildByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">An identifier to find the child node.</param>
        <summary>Gets a child from the container with its tag</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Gets a child from the container with its tag</para>
          <para>
            <para>a <see cref="T:Cocos2D.CCNode" /> object whose tag equals to the input parameter </para>
          </para>
          <para>a <see cref="T:Cocos2D.CCNode" /> object whose tag equals to the input parameter </para>
          <see cref="T:Cocos2D.CCNode" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public void GetPosition (out float x, out float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetPosition(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="y" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Gets position in a more efficient way, returns two number instead of a Point object</summary>
        <remarks>
          <para>Gets position in a more efficient way, returns two number instead of a Point object</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1gaecff4d4aeacdce557bf4b722befe9fd2" kindref="member">setPosition(float, float)</ref>
            </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1gaecff4d4aeacdce557bf4b722befe9fd2" kindref="member">setPosition(float, float)</ref>
          </para>
          <ref refid="group__base__nodes_1gaecff4d4aeacdce557bf4b722befe9fd2" kindref="member">setPosition(float, float)</ref>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grid">
      <MemberSignature Language="C#" Value="public Cocos2D.CCGridBase Grid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCGridBase Grid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCGridBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes a grid object that is used when applying effects</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes a grid object that is used when applying effects</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="public virtual bool HasFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreAnchorPointForPosition">
      <MemberSignature Language="C#" Value="public virtual bool IgnoreAnchorPointForPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreAnchorPointForPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the anchor point will be (0,0) when you position this node.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets whether the anchor point will be (0,0) when you position this node.</para>
          <para>This is an internal method, only used by <see cref="T:Cocos2D.CCLayer" /> and <see cref="T:Cocos2D.CCScene" />. Don't call it outside framework. The default value is false, while in <see cref="T:Cocos2D.CCLayer" /> and <see cref="T:Cocos2D.CCScene" /> are true</para>
          <see cref="T:Cocos2D.CCLayer" />
          <see cref="T:Cocos2D.CCScene" />
          <see cref="T:Cocos2D.CCLayer" />
          <see cref="T:Cocos2D.CCScene" />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public virtual bool Init ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Init() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes the instance of Whether the initialization was successful. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not the node accepts event callbacks.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns whether or not the node accepts event callbacks.</para>
          <para>Running means the node accept event callbacks like <ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member">onEnter()</ref>, <ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member">onExit()</ref>, update()</para>
          <ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member">onEnter()</ref>
          <ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member">onExit()</ref>
          <para>
            <para>Whether or not the node is running. </para>
          </para>
          <para>Whether or not the node is running. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="kCCNodeTagInvalid">
      <MemberSignature Language="C#" Value="public const int kCCNodeTagInvalid = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 kCCNodeTagInvalid = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bIgnoreAnchorPointForPosition">
      <MemberSignature Language="C#" Value="protected bool m_bIgnoreAnchorPointForPosition;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bIgnoreAnchorPointForPosition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bInverseDirty">
      <MemberSignature Language="C#" Value="protected bool m_bInverseDirty;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bInverseDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bReorderChildDirty">
      <MemberSignature Language="C#" Value="protected bool m_bReorderChildDirty;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bReorderChildDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bRunning">
      <MemberSignature Language="C#" Value="protected bool m_bRunning;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bRunning" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bTransformDirty">
      <MemberSignature Language="C#" Value="public bool m_bTransformDirty;" />
      <MemberSignature Language="ILAsm" Value=".field public bool m_bTransformDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bVisible">
      <MemberSignature Language="C#" Value="protected bool m_bVisible;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bVisible" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fRotationX">
      <MemberSignature Language="C#" Value="protected float m_fRotationX;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fRotationX" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fRotationY">
      <MemberSignature Language="C#" Value="protected float m_fRotationY;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fRotationY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fScaleX">
      <MemberSignature Language="C#" Value="protected float m_fScaleX;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fScaleX" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fScaleY">
      <MemberSignature Language="C#" Value="protected float m_fScaleY;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fScaleY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fSkewX">
      <MemberSignature Language="C#" Value="protected float m_fSkewX;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fSkewX" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fSkewY">
      <MemberSignature Language="C#" Value="protected float m_fSkewY;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fSkewY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fVertexZ">
      <MemberSignature Language="C#" Value="protected float m_fVertexZ;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fVertexZ" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_nTag">
      <MemberSignature Language="C#" Value="protected int m_nTag;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 m_nTag" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obAnchorPoint">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obAnchorPoint;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obAnchorPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obAnchorPointInPoints">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obAnchorPointInPoints;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obAnchorPointInPoints" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obContentSize">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCSize m_obContentSize;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCSize m_obContentSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obPosition">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obPosition;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obPosition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pActionManager">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCActionManager m_pActionManager;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCActionManager m_pActionManager" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCActionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pCamera">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCCamera m_pCamera;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCCamera m_pCamera" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pChildren">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt; m_pChildren;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCRawList`1&lt;class Cocos2D.CCNode&gt; m_pChildren" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pGrid">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCGridBase m_pGrid;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCGridBase m_pGrid" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCGridBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pParent">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCNode m_pParent;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCNode m_pParent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pScheduler">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCScheduler m_pScheduler;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCScheduler m_pScheduler" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pUserData">
      <MemberSignature Language="C#" Value="protected object m_pUserData;" />
      <MemberSignature Language="ILAsm" Value=".field family object m_pUserData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_sTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform m_sTransform;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype Cocos2D.CCAffineTransform m_sTransform" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_uOrderOfArrival">
      <MemberSignature Language="C#" Value="protected uint m_uOrderOfArrival;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly unsigned int32 m_uOrderOfArrival" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeToParentTransform">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCAffineTransform NodeToParentTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Cocos2D.CCAffineTransform NodeToParentTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the matrix that transform the node's (local) space coordinates into the parent's space coordinates. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NodeToWorldTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform NodeToWorldTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCAffineTransform NodeToWorldTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the world affine transform matrix. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NumberOfRunningActions">
      <MemberSignature Language="C#" Value="public int NumberOfRunningActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NumberOfRunningActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays).</para>
          <para>Composable actions are counted as 1 action. Example: If you are running 1 <see cref="T:Cocos2D.CCSequence" /> of 7 actions, it will return 1. If you are running 7 Sequences of 2 actions, it will return 7. </para>
          <see cref="T:Cocos2D.CCSequence" />
          <para>
            <para>The number of actions that are running plus the ones that are schedule to run </para>
          </para>
          <para>The number of actions that are running plus the ones that are schedule to run </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="public virtual void OnEnter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time when  enters the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition starts. During onEnter you can't access a "sister/brother" node. If you override onEnter, you shall call its parent's one, e.g., Node::onEnter(). </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnEnterTransitionDidFinish">
      <MemberSignature Language="C#" Value="public virtual void OnEnterTransitionDidFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnterTransitionDidFinish() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked when the  enters in the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition finishes. If you override onEnterTransitionDidFinish, you shall call its parent's one, e.g. Node::onEnterTransitionDidFinish()</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnExit">
      <MemberSignature Language="C#" Value="public virtual void OnExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this event is called when the transition finishes. During onExit you can't access a sibling node. If you override onExit, you shall call its parent's one, e.g., Node::onExit(). </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OnExitTransitionDidStart">
      <MemberSignature Language="C#" Value="public virtual void OnExitTransitionDidStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExitTransitionDidStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is called every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this callback is called when the transition starts. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OrderOfArrival">
      <MemberSignature Language="C#" Value="public uint OrderOfArrival { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 OrderOfArrival" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the arrival order, indecates which children is added previously.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the arrival order, indecates which children is added previously.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member">setOrderOfArrival(unsigned int)</ref>
            </para>
            <para>The arrival order. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member">setOrderOfArrival(unsigned int)</ref>
          </para>
          <ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member">setOrderOfArrival(unsigned int)</ref>
          <para>The arrival order. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Cocos2D.CCNode Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCNode Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a pointer to the parent node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a pointer to the parent node</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member">setParent(Node*)</ref>
            </para>
            <para>A pointer to the parnet node </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member">setParent(Node*)</ref>
          </para>
          <ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member">setParent(Node*)</ref>
          <para>A pointer to the parnet node </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentToNodeTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform ParentToNodeTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCAffineTransform ParentToNodeTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the matrix that transform parent's space coordinates to the node's (local) space coordinates. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PauseSchedulerAndActions">
      <MemberSignature Language="C#" Value="public void PauseSchedulerAndActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PauseSchedulerAndActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses all scheduled selectors and actions. This method is called internally by onExit </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCPoint Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionX">
      <MemberSignature Language="C#" Value="public float PositionX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PositionX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets/Sets x or y coordinate individually for position. These methods are used in Lua and Javascript Bindings </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionY">
      <MemberSignature Language="C#" Value="public float PositionY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PositionY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all children from the container with a cleanup.</summary>
        <remarks>
          <para>Removes all children from the container with a cleanup.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1gaf79a48257a5d884d426ac561a1347897" kindref="member">removeAllChildrenWithCleanup(bool)</ref>
            </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1gaf79a48257a5d884d426ac561a1347897" kindref="member">removeAllChildrenWithCleanup(bool)</ref>
          </para>
          <ref refid="group__base__nodes_1gaf79a48257a5d884d426ac561a1347897" kindref="member">removeAllChildrenWithCleanup(bool)</ref>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildrenWithCleanup">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllChildrenWithCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildrenWithCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">true if all running actions on all children nodes should be cleanup, false oterwise. </param>
        <summary>Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.</summary>
        <remarks>
          <para>Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public void RemoveChild (Cocos2D.CCNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChild(class Cocos2D.CCNode child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
      </Parameters>
      <Docs>
        <param name="child">The child node which will be removed. </param>
        <summary>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</summary>
        <remarks>
          <para>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public virtual void RemoveChild (Cocos2D.CCNode child, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveChild(class Cocos2D.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildByTag">
      <MemberSignature Language="C#" Value="public void RemoveChildByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChildByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">An interger number that identifies a child node </param>
        <summary>Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter</summary>
        <remarks>
          <para>Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildByTag">
      <MemberSignature Language="C#" Value="public void RemoveChildByTag (int tag, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChildByTag(int32 tag, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParent">
      <MemberSignature Language="C#" Value="public void RemoveFromParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromParent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes this node itself from its parent node with a cleanup. If the node orphan, then nothing happens. removeFromParentAndCleanup(bool)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParentAndCleanup">
      <MemberSignature Language="C#" Value="public void RemoveFromParentAndCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromParentAndCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">true if all actions and callbacks on this node should be removed, false otherwise. </param>
        <summary>Removes this node itself from its parent node. If the node orphan, then nothing happens. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReorderChild">
      <MemberSignature Language="C#" Value="public virtual void ReorderChild (Cocos2D.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderChild(class Cocos2D.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">An already added child node. It MUST be already added. </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)</param>
        <summary>Reorders a child according to a new z value.</summary>
        <remarks>
          <para>Reorders a child according to a new z value.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeSchedulerAndActions">
      <MemberSignature Language="C#" Value="public void ResumeSchedulerAndActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeSchedulerAndActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resumes all scheduled selectors and actions. This method is called internally by onEnter </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public virtual float Rotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the rotation of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the rotation of the node in degrees.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga75d7d9854be663bfcdad47dadf9f093b" kindref="member">setRotation(float)</ref>
            </para>
            <para>The rotation of the node in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga75d7d9854be663bfcdad47dadf9f093b" kindref="member">setRotation(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga75d7d9854be663bfcdad47dadf9f093b" kindref="member">setRotation(float)</ref>
          <para>The rotation of the node in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationX">
      <MemberSignature Language="C#" Value="public virtual float RotationX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the X rotation (angle) of the node in degrees which performs a horizontal rotation skew.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets the X rotation (angle) of the node in degrees which performs a horizontal rotation skew.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member">setRotationX(float)</ref>
            </para>
            <para>The X rotation in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member">setRotationX(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member">setRotationX(float)</ref>
          <para>The X rotation in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationY">
      <MemberSignature Language="C#" Value="public virtual float RotationY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member">setRotationY(float)</ref>
            </para>
            <para>The Y rotation in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member">setRotationY(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member">setRotationY(float)</ref>
          <para>The Y rotation in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunAction">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAction RunAction (Cocos2D.CCAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Cocos2D.CCAction RunAction(class Cocos2D.CCAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Cocos2D.CCAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>Executes an action, and returns the action that is executed.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Executes an action, and returns the action that is executed.</para>
          <para>This node becomes the action's target. Refer to Action::getTarget() <para>Actions don't retain their target.</para><para>An <see cref="T:Cocos2D.CCAction" /> pointer </para></para>
          <para>Actions don't retain their target.</para>
          <para>An <see cref="T:Cocos2D.CCAction" /> pointer </para>
          <see cref="T:Cocos2D.CCAction" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual float Scale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the scale factor of the node, when X and Y have the same scale factor.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets the scale factor of the node, when X and Y have the same scale factor.</para>
          <para>
            <para>Assert when _scaleX != _scaleY. </para>
            <para>
              <ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member">setScale(float)</ref>
            </para>
            <para>The scale factor of the node. </para>
          </para>
          <para>Assert when _scaleX != _scaleY. </para>
          <para>
            <ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member">setScale(float)</ref>
          </para>
          <ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member">setScale(float)</ref>
          <para>The scale factor of the node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleX">
      <MemberSignature Language="C#" Value="public virtual float ScaleX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scale factor on X axis of this node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the scale factor on X axis of this node</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member">setScaleX(float)</ref>
            </para>
            <para>The scale factor on X axis. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member">setScaleX(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member">setScaleX(float)</ref>
          <para>The scale factor on X axis. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleY">
      <MemberSignature Language="C#" Value="public virtual float ScaleY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scale factor on Y axis of this node</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the scale factor on Y axis of this node</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member">setScaleY(float)</ref>
            </para>
            <para>The scale factor on Y axis. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member">setScaleY(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member">setScaleY(float)</ref>
          <para>The scale factor on Y axis. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <summary>Schedules a custom selector, the scheduled selector will be ticked every frame schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector, float interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector, float32 interval) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="interval" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="interval">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector, float interval, uint repeat, float delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector, float32 interval, unsigned int32 repeat, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="interval" Type="System.Single" />
        <Parameter Name="repeat" Type="System.UInt32" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="interval">To be added.</param>
        <param name="repeat">To be added.</param>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleOnce">
      <MemberSignature Language="C#" Value="public void ScheduleOnce (Action&lt;float&gt; selector, float delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleOnce(class System.Action`1&lt;float32&gt; selector, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <param name="delay">The amount of time that the first tick will wait before execution. </param>
        <summary>Schedules a selector that runs only once, with a delay of 0 or larger schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public Cocos2D.CCScheduler Scheduler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCScheduler Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Sheduler object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets a Sheduler object.</para>
          <para>
            <para>
              <ref refid="classcocos2d_1_1_node_1af298cb47edf3f8dcd53d1476e5f9ba8b" kindref="member">setScheduler(Scheduler*)</ref>
            </para>
            <para>A <see cref="T:Cocos2D.CCScheduler" /> object. </para>
          </para>
          <para>
            <ref refid="classcocos2d_1_1_node_1af298cb47edf3f8dcd53d1476e5f9ba8b" kindref="member">setScheduler(Scheduler*)</ref>
          </para>
          <ref refid="classcocos2d_1_1_node_1af298cb47edf3f8dcd53d1476e5f9ba8b" kindref="member">setScheduler(Scheduler*)</ref>
          <para>A <see cref="T:Cocos2D.CCScheduler" /> object. </para>
          <see cref="T:Cocos2D.CCScheduler" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleUpdate">
      <MemberSignature Language="C#" Value="public void ScheduleUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schedules the "update" method.</summary>
        <remarks>
          <para>Schedules the "update" method.</para>
          <para>It will use the order number 0. This method will be called every frame. Scheduled methods with a lower order value will be called before the ones that have a higher order value. Only one "update" method could be scheduled per node. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleUpdateWithPriority">
      <MemberSignature Language="C#" Value="public void ScheduleUpdateWithPriority (int priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleUpdateWithPriority(int32 priority) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="priority">To be added.</param>
        <summary>Schedules the "update" method with a custom priority.</summary>
        <remarks>
          <para>Schedules the "update" method with a custom priority.</para>
          <para>This selector will be called every frame. Scheduled methods with a lower priority will be called before the ones that have a higher value. Only one "update" selector could be scheduled per node (You can't have 2 'update' selectors). </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual void Serialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Serialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPosition">
      <MemberSignature Language="C#" Value="public void SetPosition (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPosition(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">X coordinate for position </param>
        <param name="y">Y coordinate for position </param>
        <summary>Sets position in a more efficient way.</summary>
        <remarks>
          <para>Sets position in a more efficient way.</para>
          <para>Passing two numbers (x,y) is much efficient than passing Point object. This method is binded to lua and javascript. Passing a number is 10 times faster than passing a object from lua to c++</para>
          <para>
            <programlisting>
              <codeline>
                <highlight class="comment">//<sp />sample<sp />code<sp />in<sp />lua</highlight>
                <highlight class="normal"></highlight>
              </codeline>
              <codeline>
                <highlight class="normal">local<sp />pos<sp /><sp />=<sp />node::getPosition()<sp /><sp />--<sp />returns<sp />Point<sp /></highlight>
                <highlight class="keywordtype">object</highlight>
                <highlight class="normal">
                  <sp />from<sp />C++</highlight>
              </codeline>
              <codeline>
                <highlight class="normal">node:<ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member">setPosition</ref>(x,<sp />y)<sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp />--<sp />pass<sp />x,<sp />y<sp />coordinate<sp />to<sp />C++</highlight>
              </codeline>
            </programlisting>
          </para>
          <programlisting>
            <codeline>
              <highlight class="comment">//<sp />sample<sp />code<sp />in<sp />lua</highlight>
              <highlight class="normal"></highlight>
            </codeline>
            <codeline>
              <highlight class="normal">local<sp />pos<sp /><sp />=<sp />node::getPosition()<sp /><sp />--<sp />returns<sp />Point<sp /></highlight>
              <highlight class="keywordtype">object</highlight>
              <highlight class="normal">
                <sp />from<sp />C++</highlight>
            </codeline>
            <codeline>
              <highlight class="normal">node:<ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member">setPosition</ref>(x,<sp />y)<sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp />--<sp />pass<sp />x,<sp />y<sp />coordinate<sp />to<sp />C++</highlight>
            </codeline>
          </programlisting>
          <codeline>
            <highlight class="comment">//<sp />sample<sp />code<sp />in<sp />lua</highlight>
            <highlight class="normal"></highlight>
          </codeline>
          <highlight class="comment">//<sp />sample<sp />code<sp />in<sp />lua</highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="normal"></highlight>
          <codeline>
            <highlight class="normal">local<sp />pos<sp /><sp />=<sp />node::getPosition()<sp /><sp />--<sp />returns<sp />Point<sp /></highlight>
            <highlight class="keywordtype">object</highlight>
            <highlight class="normal">
              <sp />from<sp />C++</highlight>
          </codeline>
          <highlight class="normal">local<sp />pos<sp /><sp />=<sp />node::getPosition()<sp /><sp />--<sp />returns<sp />Point<sp /></highlight>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <highlight class="keywordtype">object</highlight>
          <highlight class="normal">
            <sp />from<sp />C++</highlight>
          <sp />
          <sp />
          <codeline>
            <highlight class="normal">node:<ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member">setPosition</ref>(x,<sp />y)<sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp />--<sp />pass<sp />x,<sp />y<sp />coordinate<sp />to<sp />C++</highlight>
          </codeline>
          <highlight class="normal">node:<ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member">setPosition</ref>(x,<sp />y)<sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp /><sp />--<sp />pass<sp />x,<sp />y<sp />coordinate<sp />to<sp />C++</highlight>
          <ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member">setPosition</ref>
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <sp />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewX">
      <MemberSignature Language="C#" Value="public virtual float SkewX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the X skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the X skew angle of the node in degrees.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member">setSkewX(float)</ref>
            </para>
            <para>The X skew angle of the node in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member">setSkewX(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member">setSkewX(float)</ref>
          <para>The X skew angle of the node in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewY">
      <MemberSignature Language="C#" Value="public virtual float SkewY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Y skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the Y skew angle of the node in degrees.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member">setSkewY(float)</ref>
            </para>
            <para>The Y skew angle of the node in degrees. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member">setSkewY(float)</ref>
          </para>
          <ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member">setSkewY(float)</ref>
          <para>The Y skew angle of the node in degrees. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortAllChildren">
      <MemberSignature Language="C#" Value="public virtual void SortAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SortAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the children array once before drawing, instead of every time when a child is added or reordered. This appraoch can improves the performance massively. Don't call this manually unless a child added needs to be removed in the same frame </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="StopAction">
      <MemberSignature Language="C#" Value="public void StopAction (Cocos2D.CCAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopAction(class Cocos2D.CCAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Cocos2D.CCAction" />
      </Parameters>
      <Docs>
        <param name="action">action object to be removed. </param>
        <summary>Stops and removes an action from the running action list.</summary>
        <remarks>
          <para>Stops and removes an action from the running action list.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActionByTag">
      <MemberSignature Language="C#" Value="public void StopActionByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActionByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">tag that indicates the action to be removed. </param>
        <summary>Removes an action from the running action list by its tag.</summary>
        <remarks>
          <para>Removes an action from the running action list by its tag.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAllActions">
      <MemberSignature Language="C#" Value="public void StopAllActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopAllActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops and removes all actions from the running action list . </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public int Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the tag that is used to identify the node easily.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Changes the tag that is used to identify the node easily.</para>
          <para>Please refer to getTag for the sample code.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs OpenGL view-matrix transformation based on position, scale, rotation and other attributes. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TransformAncestors">
      <MemberSignature Language="C#" Value="public void TransformAncestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformAncestors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs OpenGL view-matrix transformation of it's ancestors. Generally the ancestors are already transformed, but in certain cases (eg: attaching a FBO) It's necessary to transform the ancestors again. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public void Unschedule (Action&lt;float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unschedule(class System.Action`1&lt;float32&gt; selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <summary>Unschedules a custom selector. schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnscheduleAllSelectors">
      <MemberSignature Language="C#" Value="public void UnscheduleAllSelectors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnscheduleAllSelectors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unschedule all scheduled selectors: custom selectors, and the 'update' selector. Actions are not affected by this method. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnscheduleUpdate">
      <MemberSignature Language="C#" Value="public void UnscheduleUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnscheduleUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (float dt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float32 dt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dt" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dt">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTransform">
      <MemberSignature Language="C#" Value="public virtual void UpdateTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls children's updateTransform() method recursively.</summary>
        <remarks>
          <para>Calls children's <ref refid="classcocos2d_1_1_node_1a36c8969b2ac4c489092729363ee496cd" kindref="member">updateTransform()</ref> method recursively.</para>
          <ref refid="classcocos2d_1_1_node_1a36c8969b2ac4c489092729363ee496cd" kindref="member">updateTransform()</ref>
          <para>This method is moved from <see cref="T:Cocos2D.CCSprite" />, so it's no longer specific to <see cref="T:Cocos2D.CCSprite" />. As the result, you apply <see cref="T:Cocos2D.CCSpriteBatchNode" />'s optimization on your customed <see cref="T:Cocos2D.CCNode" />. e.g., batchNode-&gt;addChild(myCustomNode), while you can only addChild(sprite) before. </para>
          <see cref="T:Cocos2D.CCSprite" />
          <see cref="T:Cocos2D.CCSprite" />
          <see cref="T:Cocos2D.CCSpriteBatchNode" />
          <see cref="T:Cocos2D.CCNode" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserData">
      <MemberSignature Language="C#" Value="public object UserData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets a custom user data pointer</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets a custom user data pointer</para>
          <para>You can set everything in UserData pointer, a data block, a structure or an object, etc. <para>Don't forget to release the memroy manually, especially before you change this data pointer, and before this node is autoreleased.</para></para>
          <para>Don't forget to release the memroy manually, especially before you change this data pointer, and before this node is autoreleased.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserObject">
      <MemberSignature Language="C#" Value="public object UserObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a user assigned Object</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a user assigned Object</para>
          <para>Similar to UserData, but instead of holding a void* it holds an object. The UserObject will be retained once in this method, and the previous UserObject (if existed) will be relese. The UserObject will be released in <see cref="T:Cocos2D.CCNode" />'s destructure.</para>
          <see cref="T:Cocos2D.CCNode" />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexZ">
      <MemberSignature Language="C#" Value="public virtual float VertexZ { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 VertexZ" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets OpenGL Z vertex of this node.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets OpenGL Z vertex of this node.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1gaaabfa28f96e520e204c68900aa8e94fa" kindref="member">setVertexZ(float)</ref>
            </para>
            <para>OpenGL Z vertex of this node </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1gaaabfa28f96e520e204c68900aa8e94fa" kindref="member">setVertexZ(float)</ref>
          </para>
          <ref refid="group__base__nodes_1gaaabfa28f96e520e204c68900aa8e94fa" kindref="member">setVertexZ(float)</ref>
          <para>OpenGL Z vertex of this node </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the node is visible</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sets whether the node is visible</para>
          <para>The default value is true, a node is default to visible</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visits this node's children and draw them recursively. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WorldToNodeTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform WorldToNodeTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCAffineTransform WorldToNodeTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the inverse world affine transform matrix. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ZOrder">
      <MemberSignature Language="C#" Value="public int ZOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ZOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Z order of this node.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets the Z order of this node.</para>
          <para>
            <para>
              <ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member">setZOrder(int)</ref>
            </para>
            <para>The Z order. </para>
          </para>
          <para>
            <ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member">setZOrder(int)</ref>
          </para>
          <ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member">setZOrder(int)</ref>
          <para>The Z order. </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>