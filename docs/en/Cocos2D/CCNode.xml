<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCNode" FullName="Cocos2D.CCNode">
  <TypeSignature Language="C#" Value="public class CCNode : Cocos2D.ICCFocusable, Cocos2D.ICCSelectorProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCNode extends System.Object implements class Cocos2D.ICCFocusable, class Cocos2D.ICCSelectorProtocol" />
  <AssemblyInfo>
    <AssemblyName>cocos2d-xna</AssemblyName>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Cocos2D.ICCFocusable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Cocos2D.ICCSelectorProtocol</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCNode" /&gt; is the main element. Anything that gets drawn or contains things that get drawn is a &lt;see cref="T:Cocos2D.CCNode" /&gt;. The most popular Nodes are: &lt;see cref="T:Cocos2D.CCScene" /&gt;, &lt;see cref="T:Cocos2D.CCLayer" /&gt;, &lt;see cref="T:Cocos2D.CCSprite" /&gt;, &lt;see cref="T:Cocos2D.CCMenu" /&gt;. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;see cref="T:Cocos2D.CCScene" /&gt;&lt;see cref="T:Cocos2D.CCLayer" /&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;&lt;see cref="T:Cocos2D.CCMenu" /&gt;</summary>
    <remarks>&lt;para&gt;The main features of a &lt;see cref="T:Cocos2D.CCNode" /&gt; are:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;They can contain other Node nodes (addChild, getChildByTag, removeChild, etc)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;They can schedule periodic callback (schedule, unschedule, etc)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;They can execute actions (runAction, stopAction, etc)&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;They can contain other Node nodes (addChild, getChildByTag, removeChild, etc)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;They can schedule periodic callback (schedule, unschedule, etc)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;They can execute actions (runAction, stopAction, etc)&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;They can contain other &lt;see cref="T:Cocos2D.CCNode" /&gt; nodes (addChild, getChildByTag, removeChild, etc)&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;para&gt;They can schedule periodic callback (schedule, unschedule, etc)&lt;/para&gt;&lt;para&gt;They can execute actions (runAction, stopAction, etc)&lt;/para&gt;&lt;para&gt;Some &lt;see cref="T:Cocos2D.CCNode" /&gt; nodes provide extra functionality for them or their children.&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;para&gt;Subclassing a &lt;see cref="T:Cocos2D.CCNode" /&gt; usually means (one/all) of:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;overriding init to initialize resources and schedule callbacks&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;create callbacks to handle the advancement of time&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;overriding draw to render the node&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;overriding init to initialize resources and schedule callbacks&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;create callbacks to handle the advancement of time&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;overriding draw to render the node&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;overriding init to initialize resources and schedule callbacks&lt;/para&gt;&lt;para&gt;create callbacks to handle the advancement of time&lt;/para&gt;&lt;para&gt;overriding draw to render the node&lt;/para&gt;&lt;para&gt;Features of &lt;see cref="T:Cocos2D.CCNode" /&gt;:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;position&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;scale (x, y)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;rotation (in degrees, clockwise)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;Camera (an interface to gluLookAt )&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;GridBase (to do mesh transformations)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;anchor point&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;size&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;visible&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;z-order&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;openGL z position&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;position&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;scale (x, y)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;rotation (in degrees, clockwise)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;Camera (an interface to gluLookAt )&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;GridBase (to do mesh transformations)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;anchor point&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;size&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;visible&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;z-order&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;openGL z position&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;position&lt;/para&gt;&lt;para&gt;scale (x, y)&lt;/para&gt;&lt;para&gt;rotation (in degrees, clockwise)&lt;/para&gt;&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCCamera" /&gt; (an interface to gluLookAt )&lt;/para&gt;&lt;see cref="T:Cocos2D.CCCamera" /&gt;&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCGridBase" /&gt; (to do mesh transformations)&lt;/para&gt;&lt;see cref="T:Cocos2D.CCGridBase" /&gt;&lt;para&gt;anchor point&lt;/para&gt;&lt;para&gt;size&lt;/para&gt;&lt;para&gt;visible&lt;/para&gt;&lt;para&gt;z-order&lt;/para&gt;&lt;para&gt;openGL z position&lt;/para&gt;&lt;para&gt;Default values:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;rotation: 0&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;position: (x=0,y=0)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;scale: (x=1,y=1)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;contentSize: (x=0,y=0)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;anchorPoint: (x=0,y=0)&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;rotation: 0&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;position: (x=0,y=0)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;scale: (x=1,y=1)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;contentSize: (x=0,y=0)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;anchorPoint: (x=0,y=0)&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;rotation: 0&lt;/para&gt;&lt;para&gt;position: (x=0,y=0)&lt;/para&gt;&lt;para&gt;scale: (x=1,y=1)&lt;/para&gt;&lt;para&gt;contentSize: (x=0,y=0)&lt;/para&gt;&lt;para&gt;anchorPoint: (x=0,y=0)&lt;/para&gt;&lt;para&gt;Limitations:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;A Node is a "void" object. It doesn't have a texture&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;A Node is a "void" object. It doesn't have a texture&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCNode" /&gt; is a "void" object. It doesn't have a texture&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;para&gt;Order in transformations with grid disabled&lt;list type="number"&gt;&lt;item&gt;&lt;description&gt;The node will be translated (position)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The node will be rotated (rotation)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The node will be scaled (scale)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The node will be moved according to the camera values (camera)&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="number"&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be translated (position)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be rotated (rotation)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be scaled (scale)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be moved according to the camera values (camera)&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;The node will be translated (position)&lt;/para&gt;&lt;para&gt;The node will be rotated (rotation)&lt;/para&gt;&lt;para&gt;The node will be scaled (scale)&lt;/para&gt;&lt;para&gt;The node will be moved according to the camera values (camera)&lt;/para&gt;&lt;para&gt;Order in transformations with grid enabled&lt;list type="number"&gt;&lt;item&gt;&lt;description&gt;The node will be translated (position)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The node will be rotated (rotation)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The node will be scaled (scale)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The grid will capture the screen&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The node will be moved according to the camera values (camera)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;The grid will render the captured screen&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="number"&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be translated (position)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be rotated (rotation)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be scaled (scale)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The grid will capture the screen&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The node will be moved according to the camera values (camera)&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;The grid will render the captured screen&lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;The node will be translated (position)&lt;/para&gt;&lt;para&gt;The node will be rotated (rotation)&lt;/para&gt;&lt;para&gt;The node will be scaled (scale)&lt;/para&gt;&lt;para&gt;The grid will capture the screen&lt;/para&gt;&lt;para&gt;The node will be moved according to the camera values (camera)&lt;/para&gt;&lt;para&gt;The grid will render the captured screen&lt;/para&gt;&lt;para&gt;
  &lt;see cref="T:Cocos2D.CCCamera" /&gt;:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;Each node has a camera. By default it points to the center of the Node. &lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCCamera" /&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;Each node has a camera. By default it points to the center of the Node. &lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;Each node has a camera. By default it points to the center of the &lt;see cref="T:Cocos2D.CCNode" /&gt;. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Allocates and initializes a node. A initialized node which is marked as "autorelease". </summary>
        <remarks>&lt;para&gt;Allocates and initializes a node. &lt;para&gt;A initialized node which is marked as "autorelease". &lt;/para&gt;&lt;/para&gt;&lt;para&gt;A initialized node which is marked as "autorelease". &lt;/para&gt;&lt;para&gt;A initialized node which is marked as "autorelease". &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionManager">
      <MemberSignature Language="C#" Value="public Cocos2D.CCActionManager ActionManager { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCActionManager ActionManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCActionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the  object that is used by all actions. setActionManager(ActionManager*)A  object. </summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Gets the &lt;see cref="T:Cocos2D.CCActionManager" /&gt; object that is used by all actions. &lt;para&gt;&lt;ref refid="classcocos2d_1_1_node_1ad48f897b668f3e6fb4229cef3cf071bd" kindref="member"&gt;setActionManager(ActionManager*)&lt;/ref&gt;&lt;/para&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCActionManager" /&gt; object. &lt;/para&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCActionManager" /&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1ad48f897b668f3e6fb4229cef3cf071bd" kindref="member"&gt;setActionManager(ActionManager*)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="classcocos2d_1_1_node_1ad48f897b668f3e6fb4229cef3cf071bd" kindref="member"&gt;setActionManager(ActionManager*)&lt;/ref&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCActionManager" /&gt; object. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCActionManager" /&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1ad48f897b668f3e6fb4229cef3cf071bd" kindref="member"&gt;setActionManager(ActionManager*)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCActionManager" /&gt; object. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (Cocos2D.CCNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class Cocos2D.CCNode child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
      </Parameters>
      <Docs>
        <param name="child">A child node </param>
        <summary>Adds a child to the container with z order and tag</summary>
        <remarks>&lt;para&gt;Adds a child to the container with z order and tag&lt;/para&gt;&lt;para&gt;If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A child node &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;zOrder&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;tag&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A child node &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A child node &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A child node &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;zOrder&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;zOrder&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;zOrder&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;tag&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;tag&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;tag&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A interger to identify the node easily. Please refer to &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (Cocos2D.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class Cocos2D.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (Cocos2D.CCNode child, int zOrder, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class Cocos2D.CCNode child, int32 zOrder, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zOrder">To be added.</param>
        <param name="tag">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdditionalTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform AdditionalTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCAffineTransform AdditionalTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the additional transform.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets the additional transform.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;The additional transform will be concatenated at the end of nodeToParentTransform. It could be used to simulate &lt;computeroutput&gt;parent-child&lt;/computeroutput&gt; relationship between two nodes (e.g. one is in BatchNode, another isn't). &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;a&lt;sp /&gt;batchNode&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode*&lt;sp /&gt;batch=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Icon-114.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(batch);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;two&lt;sp /&gt;sprites,&lt;sp /&gt;spriteA&lt;sp /&gt;will&lt;sp /&gt;be&lt;sp /&gt;added&lt;sp /&gt;to&lt;sp /&gt;batchNode,&lt;sp /&gt;they&lt;sp /&gt;are&lt;sp /&gt;using&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteA&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture());&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteB&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member"&gt;Sprite::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Icon-72.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;addChild(spriteA);&lt;sp /&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;We&lt;sp /&gt;can't&lt;sp /&gt;make&lt;sp /&gt;spriteB&lt;sp /&gt;as&lt;sp /&gt;spriteA's&lt;sp /&gt;child&lt;sp /&gt;since&lt;sp /&gt;they&lt;sp /&gt;use&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;sp /&gt;So&lt;sp /&gt;just&lt;sp /&gt;add&lt;sp /&gt;it&lt;sp /&gt;to&lt;sp /&gt;layer.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;But&lt;sp /&gt;we&lt;sp /&gt;want&lt;sp /&gt;to&lt;sp /&gt;simulate&lt;sp /&gt;`parent-child`&lt;sp /&gt;relationship&lt;sp /&gt;for&lt;sp /&gt;these&lt;sp /&gt;two&lt;sp /&gt;node.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(spriteB);&lt;sp /&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//position&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setPosition(Point(200,&lt;sp /&gt;200));&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;AffineTransform&lt;sp /&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;postion&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//scale&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setScale(2);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;scale&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//rotation&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setRotation(20);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;rotation&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt;&lt;/para&gt;
&lt;/para&gt;&lt;para&gt;The additional transform will be concatenated at the end of nodeToParentTransform. It could be used to simulate &lt;computeroutput&gt;parent-child&lt;/computeroutput&gt; relationship between two nodes (e.g. one is in BatchNode, another isn't). &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;a&lt;sp /&gt;batchNode&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode*&lt;sp /&gt;batch=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Icon-114.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(batch);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;two&lt;sp /&gt;sprites,&lt;sp /&gt;spriteA&lt;sp /&gt;will&lt;sp /&gt;be&lt;sp /&gt;added&lt;sp /&gt;to&lt;sp /&gt;batchNode,&lt;sp /&gt;they&lt;sp /&gt;are&lt;sp /&gt;using&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteA&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture());&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteB&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member"&gt;Sprite::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Icon-72.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;addChild(spriteA);&lt;sp /&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;We&lt;sp /&gt;can't&lt;sp /&gt;make&lt;sp /&gt;spriteB&lt;sp /&gt;as&lt;sp /&gt;spriteA's&lt;sp /&gt;child&lt;sp /&gt;since&lt;sp /&gt;they&lt;sp /&gt;use&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;sp /&gt;So&lt;sp /&gt;just&lt;sp /&gt;add&lt;sp /&gt;it&lt;sp /&gt;to&lt;sp /&gt;layer.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;But&lt;sp /&gt;we&lt;sp /&gt;want&lt;sp /&gt;to&lt;sp /&gt;simulate&lt;sp /&gt;`parent-child`&lt;sp /&gt;relationship&lt;sp /&gt;for&lt;sp /&gt;these&lt;sp /&gt;two&lt;sp /&gt;node.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(spriteB);&lt;sp /&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//position&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setPosition(Point(200,&lt;sp /&gt;200));&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;AffineTransform&lt;sp /&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;postion&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//scale&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setScale(2);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;scale&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//rotation&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setRotation(20);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;rotation&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt;&lt;/para&gt;&lt;computeroutput&gt;parent-child&lt;/computeroutput&gt;&lt;programlisting&gt;
  &lt;codeline&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;a&lt;sp /&gt;batchNode&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;SpriteBatchNode*&lt;sp /&gt;batch=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;
    &lt;highlight class="stringliteral"&gt;"Icon-114.png"&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(batch);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;two&lt;sp /&gt;sprites,&lt;sp /&gt;spriteA&lt;sp /&gt;will&lt;sp /&gt;be&lt;sp /&gt;added&lt;sp /&gt;to&lt;sp /&gt;batchNode,&lt;sp /&gt;they&lt;sp /&gt;are&lt;sp /&gt;using&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteA&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture());&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteB&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member"&gt;Sprite::create&lt;/ref&gt;(&lt;/highlight&gt;
    &lt;highlight class="stringliteral"&gt;"Icon-72.png"&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;batch-&amp;gt;addChild(spriteA);&lt;sp /&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;We&lt;sp /&gt;can't&lt;sp /&gt;make&lt;sp /&gt;spriteB&lt;sp /&gt;as&lt;sp /&gt;spriteA's&lt;sp /&gt;child&lt;sp /&gt;since&lt;sp /&gt;they&lt;sp /&gt;use&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;sp /&gt;So&lt;sp /&gt;just&lt;sp /&gt;add&lt;sp /&gt;it&lt;sp /&gt;to&lt;sp /&gt;layer.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;But&lt;sp /&gt;we&lt;sp /&gt;want&lt;sp /&gt;to&lt;sp /&gt;simulate&lt;sp /&gt;`parent-child`&lt;sp /&gt;relationship&lt;sp /&gt;for&lt;sp /&gt;these&lt;sp /&gt;two&lt;sp /&gt;node.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(spriteB);&lt;sp /&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//position&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;spriteA-&amp;gt;setPosition(Point(200,&lt;sp /&gt;200));&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;AffineTransform&lt;sp /&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;postion&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//scale&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;spriteA-&amp;gt;setScale(2);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;scale&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//rotation&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;spriteA-&amp;gt;setRotation(20);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;rotation&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;
  &lt;/codeline&gt;
&lt;/programlisting&gt;&lt;codeline&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;a&lt;sp /&gt;batchNode&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;a&lt;sp /&gt;batchNode&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;SpriteBatchNode*&lt;sp /&gt;batch=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;
  &lt;highlight class="stringliteral"&gt;"Icon-114.png"&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode*&lt;sp /&gt;batch=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;&lt;highlight class="stringliteral"&gt;"Icon-114.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(batch);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(batch);&lt;/highlight&gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;two&lt;sp /&gt;sprites,&lt;sp /&gt;spriteA&lt;sp /&gt;will&lt;sp /&gt;be&lt;sp /&gt;added&lt;sp /&gt;to&lt;sp /&gt;batchNode,&lt;sp /&gt;they&lt;sp /&gt;are&lt;sp /&gt;using&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;two&lt;sp /&gt;sprites,&lt;sp /&gt;spriteA&lt;sp /&gt;will&lt;sp /&gt;be&lt;sp /&gt;added&lt;sp /&gt;to&lt;sp /&gt;batchNode,&lt;sp /&gt;they&lt;sp /&gt;are&lt;sp /&gt;using&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteA&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture());&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteA&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture());&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteB&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member"&gt;Sprite::create&lt;/ref&gt;(&lt;/highlight&gt;
  &lt;highlight class="stringliteral"&gt;"Icon-72.png"&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteB&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member"&gt;Sprite::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member"&gt;Sprite::create&lt;/ref&gt;&lt;highlight class="stringliteral"&gt;"Icon-72.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;batch-&amp;gt;addChild(spriteA);&lt;sp /&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;addChild(spriteA);&lt;sp /&gt;&lt;/highlight&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;We&lt;sp /&gt;can't&lt;sp /&gt;make&lt;sp /&gt;spriteB&lt;sp /&gt;as&lt;sp /&gt;spriteA's&lt;sp /&gt;child&lt;sp /&gt;since&lt;sp /&gt;they&lt;sp /&gt;use&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;sp /&gt;So&lt;sp /&gt;just&lt;sp /&gt;add&lt;sp /&gt;it&lt;sp /&gt;to&lt;sp /&gt;layer.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;We&lt;sp /&gt;can't&lt;sp /&gt;make&lt;sp /&gt;spriteB&lt;sp /&gt;as&lt;sp /&gt;spriteA's&lt;sp /&gt;child&lt;sp /&gt;since&lt;sp /&gt;they&lt;sp /&gt;use&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;sp /&gt;So&lt;sp /&gt;just&lt;sp /&gt;add&lt;sp /&gt;it&lt;sp /&gt;to&lt;sp /&gt;layer.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;But&lt;sp /&gt;we&lt;sp /&gt;want&lt;sp /&gt;to&lt;sp /&gt;simulate&lt;sp /&gt;`parent-child`&lt;sp /&gt;relationship&lt;sp /&gt;for&lt;sp /&gt;these&lt;sp /&gt;two&lt;sp /&gt;node.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;But&lt;sp /&gt;we&lt;sp /&gt;want&lt;sp /&gt;to&lt;sp /&gt;simulate&lt;sp /&gt;`parent-child`&lt;sp /&gt;relationship&lt;sp /&gt;for&lt;sp /&gt;these&lt;sp /&gt;two&lt;sp /&gt;node.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(spriteB);&lt;sp /&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(spriteB);&lt;sp /&gt;&lt;/highlight&gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//position&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//position&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;spriteA-&amp;gt;setPosition(Point(200,&lt;sp /&gt;200));&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setPosition(Point(200,&lt;sp /&gt;200));&lt;/highlight&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;AffineTransform&lt;sp /&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;AffineTransform&lt;sp /&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;postion&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;postion&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//scale&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//scale&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;spriteA-&amp;gt;setScale(2);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setScale(2);&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;scale&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;scale&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//rotation&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//rotation&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;spriteA-&amp;gt;setRotation(20);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setRotation(20);&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;rotation&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;rotation&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;para&gt;The additional transform will be concatenated at the end of nodeToParentTransform. It could be used to simulate &lt;computeroutput&gt;parent-child&lt;/computeroutput&gt; relationship between two nodes (e.g. one is in BatchNode, another isn't). &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;a&lt;sp /&gt;batchNode&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;SpriteBatchNode*&lt;sp /&gt;batch=&lt;sp /&gt;&lt;ref refid="group__base__nodes_1ga8c460d1b39ff8e29519d233be0abe899" kindref="member"&gt;SpriteBatchNode::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Icon-114.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(batch);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;create&lt;sp /&gt;two&lt;sp /&gt;sprites,&lt;sp /&gt;spriteA&lt;sp /&gt;will&lt;sp /&gt;be&lt;sp /&gt;added&lt;sp /&gt;to&lt;sp /&gt;batchNode,&lt;sp /&gt;they&lt;sp /&gt;are&lt;sp /&gt;using&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteA&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gaab15aa8f36e11750ed3fea7f18bf04bc" kindref="member"&gt;Sprite::createWithTexture&lt;/ref&gt;(batch-&amp;gt;getTexture());&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;Sprite*&lt;sp /&gt;spriteB&lt;sp /&gt;=&lt;sp /&gt;&lt;ref refid="group__sprite__nodes_1gac4d0417d451a44a07e5b41bb6c4b072c" kindref="member"&gt;Sprite::create&lt;/ref&gt;(&lt;/highlight&gt;&lt;highlight class="stringliteral"&gt;"Icon-72.png"&lt;/highlight&gt;&lt;highlight class="normal"&gt;);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;batch-&amp;gt;addChild(spriteA);&lt;sp /&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;We&lt;sp /&gt;can't&lt;sp /&gt;make&lt;sp /&gt;spriteB&lt;sp /&gt;as&lt;sp /&gt;spriteA's&lt;sp /&gt;child&lt;sp /&gt;since&lt;sp /&gt;they&lt;sp /&gt;use&lt;sp /&gt;different&lt;sp /&gt;textures.&lt;sp /&gt;So&lt;sp /&gt;just&lt;sp /&gt;add&lt;sp /&gt;it&lt;sp /&gt;to&lt;sp /&gt;layer.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;But&lt;sp /&gt;we&lt;sp /&gt;want&lt;sp /&gt;to&lt;sp /&gt;simulate&lt;sp /&gt;`parent-child`&lt;sp /&gt;relationship&lt;sp /&gt;for&lt;sp /&gt;these&lt;sp /&gt;two&lt;sp /&gt;node.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;this-&amp;gt;&lt;ref refid="group__base__nodes_1gab38da4a2b7f4c9d1c2ba3b0d0928447c" kindref="member"&gt;addChild&lt;/ref&gt;(spriteB);&lt;sp /&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//position&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setPosition(Point(200,&lt;sp /&gt;200));&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;AffineTransform&lt;sp /&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;postion&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//scale&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setScale(2);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;scale&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//rotation&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteA-&amp;gt;setRotation(20);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Gets&lt;sp /&gt;the&lt;sp /&gt;spriteA's&lt;sp /&gt;transform.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;t&lt;sp /&gt;=&lt;sp /&gt;spriteA-&amp;gt;nodeToParentTransform();&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;Sets&lt;sp /&gt;the&lt;sp /&gt;additional&lt;sp /&gt;transform&lt;sp /&gt;to&lt;sp /&gt;spriteB,&lt;sp /&gt;spriteB's&lt;sp /&gt;rotation&lt;sp /&gt;will&lt;sp /&gt;based&lt;sp /&gt;on&lt;sp /&gt;its&lt;sp /&gt;pseudo&lt;sp /&gt;parent&lt;sp /&gt;i.e.&lt;sp /&gt;spriteA.&lt;/highlight&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;spriteB-&amp;gt;setAdditionalTransform(t);&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt;&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCPoint AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint AnchorPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the anchor point in percent.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the anchor point in percent.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1gad48a1317c06899426910afb04c3f6d50" kindref="member"&gt;setAnchorPoint(const Point&amp;amp;)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The anchor point of node. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gad48a1317c06899426910afb04c3f6d50" kindref="member"&gt;setAnchorPoint(const Point&amp;amp;)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1gad48a1317c06899426910afb04c3f6d50" kindref="member"&gt;setAnchorPoint(const Point&amp;amp;)&lt;/ref&gt;&lt;para&gt;The anchor point of node. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gad48a1317c06899426910afb04c3f6d50" kindref="member"&gt;setAnchorPoint(const Point&amp;amp;)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The anchor point of node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPointInPoints">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCPoint AnchorPointInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint AnchorPointInPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the anchorPoint in absolute pixels.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the anchorPoint in absolute pixels.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;You can only read it. If you wish to modify it, use anchorPoint instead. &lt;/para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member"&gt;getAnchorPoint()&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The anchor point in absolute pixels. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;You can only read it. If you wish to modify it, use anchorPoint instead. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member"&gt;getAnchorPoint()&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member"&gt;getAnchorPoint()&lt;/ref&gt;&lt;para&gt;The anchor point in absolute pixels. &lt;/para&gt;&lt;para&gt;You can only read it. If you wish to modify it, use anchorPoint instead. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga81546fd5e552e183d0b6527b249cf440" kindref="member"&gt;getAnchorPoint()&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The anchor point in absolute pixels. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public Cocos2D.CCRect BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCRect BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a "local" axis aligned bounding box of the node. The returned box is relative only to its parent.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns a "local" axis aligned bounding box of the node. The returned box is relative only to its parent.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;This method returns a temporaty variable, so it can't returns const Rect&amp;amp; &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;This method returns a temporaty variable, so it can't returns const Rect&amp;amp; &lt;/para&gt;&lt;para&gt;
  &lt;para&gt;A "local" axis aligned boudning box of the node. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;A "local" axis aligned boudning box of the node. &lt;/para&gt;&lt;para&gt;This method returns a temporaty variable, so it can't returns const Rect&amp;amp; &lt;/para&gt;&lt;para&gt;A "local" axis aligned boudning box of the node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBoxInPixels">
      <MemberSignature Language="C#" Value="public Cocos2D.CCRect BoundingBoxInPixels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCRect BoundingBoxInPixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Camera">
      <MemberSignature Language="C#" Value="public Cocos2D.CCCamera Camera { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCCamera Camera" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a camera object that lets you move the node using a gluLookAt</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns a camera object that lets you move the node using a gluLookAt&lt;/para&gt;&lt;para&gt;
  &lt;programlisting&gt;
    &lt;codeline&gt;
      &lt;highlight class="normal"&gt;Camera*&lt;sp /&gt;camera&lt;sp /&gt;=&lt;sp /&gt;node-&amp;gt;getCamera();&lt;/highlight&gt;
    &lt;/codeline&gt;
    &lt;codeline&gt;
      &lt;highlight class="normal"&gt;camera-&amp;gt;setEyeXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;415/2);&lt;/highlight&gt;
    &lt;/codeline&gt;
    &lt;codeline&gt;
      &lt;highlight class="normal"&gt;camera-&amp;gt;setCenterXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;0);&lt;/highlight&gt;
    &lt;/codeline&gt;
  &lt;/programlisting&gt;
&lt;/para&gt;&lt;programlisting&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;Camera*&lt;sp /&gt;camera&lt;sp /&gt;=&lt;sp /&gt;node-&amp;gt;getCamera();&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;camera-&amp;gt;setEyeXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;415/2);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;camera-&amp;gt;setCenterXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;0);&lt;/highlight&gt;
  &lt;/codeline&gt;
&lt;/programlisting&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;Camera*&lt;sp /&gt;camera&lt;sp /&gt;=&lt;sp /&gt;node-&amp;gt;getCamera();&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;Camera*&lt;sp /&gt;camera&lt;sp /&gt;=&lt;sp /&gt;node-&amp;gt;getCamera();&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;camera-&amp;gt;setEyeXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;415/2);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;camera-&amp;gt;setEyeXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;415/2);&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;camera-&amp;gt;setCenterXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;0);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;camera-&amp;gt;setCenterXYZ(0,&lt;sp /&gt;0,&lt;sp /&gt;0);&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;para&gt;
  &lt;para&gt;A &lt;see cref="T:Cocos2D.CCCamera" /&gt; object that lets you move the node using a gluLookAt &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCCamera" /&gt; object that lets you move the node using a gluLookAt &lt;/para&gt;&lt;see cref="T:Cocos2D.CCCamera" /&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCCamera" /&gt; object that lets you move the node using a gluLookAt &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReceiveFocus">
      <MemberSignature Language="C#" Value="public virtual bool CanReceiveFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReceiveFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCRawList`1&lt;class Cocos2D.CCNode&gt; Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an array of children</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Return an array of children&lt;/para&gt;&lt;para&gt;Composing a "tree" structure is a very important feature of &lt;see cref="T:Cocos2D.CCNode" /&gt; Here's a sample code of traversing children array: &lt;programlisting&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member"&gt;Node&lt;/ref&gt;*&lt;sp /&gt;node&lt;sp /&gt;=&lt;sp /&gt;NULL;&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member"&gt;CCARRAY_FOREACH&lt;/ref&gt;(parent-&amp;gt;getChildren(),&lt;sp /&gt;node)&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;{&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;node-&amp;gt;setPosition(0,0);&lt;/highlight&gt;&lt;/codeline&gt;&lt;codeline&gt;&lt;highlight class="normal"&gt;}&lt;/highlight&gt;&lt;/codeline&gt;&lt;/programlisting&gt; This sample code traverses all children nodes, and set theie position to (0,0)&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;programlisting&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;
      &lt;ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member"&gt;Node&lt;/ref&gt;*&lt;sp /&gt;node&lt;sp /&gt;=&lt;sp /&gt;NULL;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;
      &lt;ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member"&gt;CCARRAY_FOREACH&lt;/ref&gt;(parent-&amp;gt;getChildren(),&lt;sp /&gt;node)&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;{&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;
      &lt;sp /&gt;
      &lt;sp /&gt;
      &lt;sp /&gt;
      &lt;sp /&gt;node-&amp;gt;setPosition(0,0);&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;}&lt;/highlight&gt;
  &lt;/codeline&gt;
&lt;/programlisting&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;
    &lt;ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member"&gt;Node&lt;/ref&gt;*&lt;sp /&gt;node&lt;sp /&gt;=&lt;sp /&gt;NULL;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;
  &lt;ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member"&gt;Node&lt;/ref&gt;*&lt;sp /&gt;node&lt;sp /&gt;=&lt;sp /&gt;NULL;&lt;/highlight&gt;&lt;ref refid="group__base__nodes_1ga2830ddc6af8b2ec5f958b677141c1a25" kindref="member"&gt;Node&lt;/ref&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;
    &lt;ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member"&gt;CCARRAY_FOREACH&lt;/ref&gt;(parent-&amp;gt;getChildren(),&lt;sp /&gt;node)&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;
  &lt;ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member"&gt;CCARRAY_FOREACH&lt;/ref&gt;(parent-&amp;gt;getChildren(),&lt;sp /&gt;node)&lt;/highlight&gt;&lt;ref refid="group__data__structures_1ga19748065059dd10de7bf990534c98a40" kindref="member"&gt;CCARRAY_FOREACH&lt;/ref&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;{&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;{&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;
    &lt;sp /&gt;
    &lt;sp /&gt;
    &lt;sp /&gt;
    &lt;sp /&gt;node-&amp;gt;setPosition(0,0);&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;
  &lt;sp /&gt;
  &lt;sp /&gt;
  &lt;sp /&gt;
  &lt;sp /&gt;node-&amp;gt;setPosition(0,0);&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;}&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;}&lt;/highlight&gt;&lt;para&gt;
  &lt;para&gt;An array of children &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;An array of children &lt;/para&gt;&lt;para&gt;An array of children &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildrenCount">
      <MemberSignature Language="C#" Value="public int ChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the amount of children.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Get the amount of children.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;The amount of children. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;The amount of children. &lt;/para&gt;&lt;para&gt;The amount of children. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cleanup">
      <MemberSignature Language="C#" Value="public virtual void Cleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cleanup() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops all running actions and schedulers </summary>
        <remarks>Stops all running actions and schedulers </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSize">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCSize ContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCSize ContentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the untransformed size of the node.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the untransformed size of the node.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member"&gt;setContentSize(const Size&amp;amp;)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The untransformed size of the node. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member"&gt;setContentSize(const Size&amp;amp;)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member"&gt;setContentSize(const Size&amp;amp;)&lt;/ref&gt;&lt;para&gt;The untransformed size of the node. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga44b15e4e53de9cb8bb0d1fee8cb95233" kindref="member"&gt;setContentSize(const Size&amp;amp;)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The untransformed size of the node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSizeInPixels">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCSize ContentSizeInPixels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCSize ContentSizeInPixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToNodeSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToNodeSpace (Cocos2D.CCPoint worldPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToNodeSpace(valuetype Cocos2D.CCPoint worldPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worldPoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="worldPoint">To be added.</param>
        <summary>Converts a Point to node (local) space coordinates. The result is in Points. </summary>
        <returns>To be added.</returns>
        <remarks>Converts a Point to node (local) space coordinates. The result is in Points. </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToNodeSpaceAr">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToNodeSpaceAr (Cocos2D.CCPoint worldPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToNodeSpaceAr(valuetype Cocos2D.CCPoint worldPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worldPoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="worldPoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTouchToNodeSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertTouchToNodeSpace (Cocos2D.CCTouch touch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertTouchToNodeSpace(class Cocos2D.CCTouch touch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="Cocos2D.CCTouch" />
      </Parameters>
      <Docs>
        <param name="touch">To be added.</param>
        <summary>convenience methods which take a Touch instead of Point </summary>
        <returns>To be added.</returns>
        <remarks>convenience methods which take a Touch instead of Point </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTouchToNodeSpaceAr">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertTouchToNodeSpaceAr (Cocos2D.CCTouch touch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertTouchToNodeSpaceAr(class Cocos2D.CCTouch touch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="Cocos2D.CCTouch" />
      </Parameters>
      <Docs>
        <param name="touch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWindowSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToWindowSpace (Cocos2D.CCPoint nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToWindowSpace(valuetype Cocos2D.CCPoint nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>&lt;para&gt;Convert &lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt; coordinates to UI windows coordinate. &lt;/para&gt;&lt;ref refid="namespacecocos2d" kindref="compound"&gt;cocos2d&lt;/ref&gt;</summary>
        <returns>To be added.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldSpace">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToWorldSpace (Cocos2D.CCPoint nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToWorldSpace(valuetype Cocos2D.CCPoint nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>Converts a Point to world space coordinates. The result is in Points. </summary>
        <returns>To be added.</returns>
        <remarks>Converts a Point to world space coordinates. The result is in Points. </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldSpaceAr">
      <MemberSignature Language="C#" Value="public Cocos2D.CCPoint ConvertToWorldSpaceAr (Cocos2D.CCPoint nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCPoint ConvertToWorldSpaceAr(valuetype Cocos2D.CCPoint nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="Cocos2D.CCPoint" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual void Deserialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deserialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method to draw your own node. The following GL states will be enabled by default:glEnableClientState(GL_VERTEX_ARRAY);glEnableClientState(GL_COLOR_ARRAY);glEnableClientState(GL_TEXTURE_COORD_ARRAY);glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. </summary>
        <remarks>&lt;para&gt;Override this method to draw your own node. The following GL states will be enabled by default:&lt;list type="bullet"&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;description&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/description&gt;&lt;/item&gt;&lt;/list&gt;&lt;/para&gt;&lt;list type="bullet"&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;description&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/description&gt;
  &lt;/item&gt;
&lt;/list&gt;&lt;para&gt;glEnableClientState(GL_VERTEX_ARRAY);&lt;/para&gt;&lt;para&gt;glEnableClientState(GL_COLOR_ARRAY);&lt;/para&gt;&lt;para&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);&lt;/para&gt;&lt;para&gt;glEnable(GL_TEXTURE_2D); AND YOU SHOULD NOT DISABLE THEM AFTER DRAWING YOUR NODE But if you enable any other GL state, you should disable it after drawing your node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CCNode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionByTag">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAction GetActionByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Cocos2D.CCAction GetActionByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>Gets an action from the running action list by its tag.</summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Gets an action from the running action list by its tag.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;, &lt;ref refid="group__base__nodes_1ga79da575d4c240206a788d996300ec967" kindref="member"&gt;getTag()&lt;/ref&gt;.&lt;/para&gt;
  &lt;para&gt;The action object with the given tag. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;, &lt;ref refid="group__base__nodes_1ga79da575d4c240206a788d996300ec967" kindref="member"&gt;getTag()&lt;/ref&gt;.&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;&lt;ref refid="group__base__nodes_1ga79da575d4c240206a788d996300ec967" kindref="member"&gt;getTag()&lt;/ref&gt;&lt;para&gt;The action object with the given tag. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga259d0d8f26ad66e966b275c559b2cfee" kindref="member"&gt;setTag(int)&lt;/ref&gt;, &lt;ref refid="group__base__nodes_1ga79da575d4c240206a788d996300ec967" kindref="member"&gt;getTag()&lt;/ref&gt;.&lt;/para&gt;&lt;para&gt;The action object with the given tag. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildByTag">
      <MemberSignature Language="C#" Value="public Cocos2D.CCNode GetChildByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Cocos2D.CCNode GetChildByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">An identifier to find the child node.</param>
        <summary>Gets a child from the container with its tag</summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Gets a child from the container with its tag&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;a &lt;see cref="T:Cocos2D.CCNode" /&gt; object whose tag equals to the input parameter &lt;/para&gt;
&lt;/para&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;tag&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;An identifier to find the child node.&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;tag&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;An identifier to find the child node.&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;tag&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;tag&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;An identifier to find the child node.&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;An identifier to find the child node.&lt;/para&gt;&lt;para&gt;a &lt;see cref="T:Cocos2D.CCNode" /&gt; object whose tag equals to the input parameter &lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;para&gt;a &lt;see cref="T:Cocos2D.CCNode" /&gt; object whose tag equals to the input parameter &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public void GetPosition (out float x, out float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetPosition(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="y" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Gets position in a more efficient way, returns two number instead of a Point object</summary>
        <remarks>&lt;para&gt;Gets position in a more efficient way, returns two number instead of a Point object&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1gaecff4d4aeacdce557bf4b722befe9fd2" kindref="member"&gt;setPosition(float, float)&lt;/ref&gt;
  &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gaecff4d4aeacdce557bf4b722befe9fd2" kindref="member"&gt;setPosition(float, float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1gaecff4d4aeacdce557bf4b722befe9fd2" kindref="member"&gt;setPosition(float, float)&lt;/ref&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gaecff4d4aeacdce557bf4b722befe9fd2" kindref="member"&gt;setPosition(float, float)&lt;/ref&gt;
&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Grid">
      <MemberSignature Language="C#" Value="public Cocos2D.CCGridBase Grid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCGridBase Grid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCGridBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes a grid object that is used when applying effects</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes a grid object that is used when applying effects&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;A&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Grid object that is used when applying effects &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;A&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Grid object that is used when applying effects &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;A&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;A&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Grid object that is used when applying effects &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Grid object that is used when applying effects &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="public virtual bool HasFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreAnchorPointForPosition">
      <MemberSignature Language="C#" Value="public virtual bool IgnoreAnchorPointForPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreAnchorPointForPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the anchor point will be (0,0) when you position this node.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets whether the anchor point will be (0,0) when you position this node.&lt;/para&gt;&lt;para&gt;This is an internal method, only used by &lt;see cref="T:Cocos2D.CCLayer" /&gt; and &lt;see cref="T:Cocos2D.CCScene" /&gt;. Don't call it outside framework. The default value is false, while in &lt;see cref="T:Cocos2D.CCLayer" /&gt; and &lt;see cref="T:Cocos2D.CCScene" /&gt; are true&lt;/para&gt;&lt;see cref="T:Cocos2D.CCLayer" /&gt;&lt;see cref="T:Cocos2D.CCScene" /&gt;&lt;see cref="T:Cocos2D.CCLayer" /&gt;&lt;see cref="T:Cocos2D.CCScene" /&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;ignore&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;ignore&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;ignore&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;ignore&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if anchor point will be (0,0) when you position this node &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public virtual bool Init ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Init() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes the instance of Whether the initialization was successful. </summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Initializes the instance of &lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;para&gt;Whether the initialization was successful. &lt;/para&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;para&gt;Whether the initialization was successful. &lt;/para&gt;&lt;para&gt;Whether the initialization was successful. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not the node accepts event callbacks.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns whether or not the node accepts event callbacks.&lt;/para&gt;&lt;para&gt;Running means the node accept event callbacks like &lt;ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member"&gt;onEnter()&lt;/ref&gt;, &lt;ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member"&gt;onExit()&lt;/ref&gt;, update()&lt;/para&gt;&lt;ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member"&gt;onEnter()&lt;/ref&gt;&lt;ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member"&gt;onExit()&lt;/ref&gt;&lt;para&gt;
  &lt;para&gt;Whether or not the node is running. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;Whether or not the node is running. &lt;/para&gt;&lt;para&gt;Whether or not the node is running. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="kCCNodeTagInvalid">
      <MemberSignature Language="C#" Value="public const int kCCNodeTagInvalid = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 kCCNodeTagInvalid = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bIgnoreAnchorPointForPosition">
      <MemberSignature Language="C#" Value="protected bool m_bIgnoreAnchorPointForPosition;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bIgnoreAnchorPointForPosition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bInverseDirty">
      <MemberSignature Language="C#" Value="protected bool m_bInverseDirty;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bInverseDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bReorderChildDirty">
      <MemberSignature Language="C#" Value="protected bool m_bReorderChildDirty;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bReorderChildDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bRunning">
      <MemberSignature Language="C#" Value="protected bool m_bRunning;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bRunning" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bTransformDirty">
      <MemberSignature Language="C#" Value="public bool m_bTransformDirty;" />
      <MemberSignature Language="ILAsm" Value=".field public bool m_bTransformDirty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_bVisible">
      <MemberSignature Language="C#" Value="protected bool m_bVisible;" />
      <MemberSignature Language="ILAsm" Value=".field family bool m_bVisible" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fRotationX">
      <MemberSignature Language="C#" Value="protected float m_fRotationX;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fRotationX" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fRotationY">
      <MemberSignature Language="C#" Value="protected float m_fRotationY;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fRotationY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fScaleX">
      <MemberSignature Language="C#" Value="protected float m_fScaleX;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fScaleX" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fScaleY">
      <MemberSignature Language="C#" Value="protected float m_fScaleY;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fScaleY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fSkewX">
      <MemberSignature Language="C#" Value="protected float m_fSkewX;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fSkewX" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fSkewY">
      <MemberSignature Language="C#" Value="protected float m_fSkewY;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fSkewY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_fVertexZ">
      <MemberSignature Language="C#" Value="protected float m_fVertexZ;" />
      <MemberSignature Language="ILAsm" Value=".field family float32 m_fVertexZ" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_nTag">
      <MemberSignature Language="C#" Value="protected int m_nTag;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 m_nTag" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obAnchorPoint">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obAnchorPoint;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obAnchorPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obAnchorPointInPoints">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obAnchorPointInPoints;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obAnchorPointInPoints" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obContentSize">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCSize m_obContentSize;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCSize m_obContentSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_obPosition">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCPoint m_obPosition;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype Cocos2D.CCPoint m_obPosition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pActionManager">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCActionManager m_pActionManager;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCActionManager m_pActionManager" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCActionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pCamera">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCCamera m_pCamera;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCCamera m_pCamera" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pChildren">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt; m_pChildren;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCRawList`1&lt;class Cocos2D.CCNode&gt; m_pChildren" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCRawList&lt;Cocos2D.CCNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pGrid">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCGridBase m_pGrid;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCGridBase m_pGrid" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCGridBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pParent">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCNode m_pParent;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCNode m_pParent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pScheduler">
      <MemberSignature Language="C#" Value="protected Cocos2D.CCScheduler m_pScheduler;" />
      <MemberSignature Language="ILAsm" Value=".field family class Cocos2D.CCScheduler m_pScheduler" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_pUserData">
      <MemberSignature Language="C#" Value="protected object m_pUserData;" />
      <MemberSignature Language="ILAsm" Value=".field family object m_pUserData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_sTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform m_sTransform;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype Cocos2D.CCAffineTransform m_sTransform" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_uOrderOfArrival">
      <MemberSignature Language="C#" Value="protected uint m_uOrderOfArrival;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly unsigned int32 m_uOrderOfArrival" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeToParentTransform">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCAffineTransform NodeToParentTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Cocos2D.CCAffineTransform NodeToParentTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the matrix that transform the node's (local) space coordinates into the parent's space coordinates. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks>Returns the matrix that transform the node's (local) space coordinates into the parent's space coordinates. The matrix is in Pixels. </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeToWorldTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform NodeToWorldTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCAffineTransform NodeToWorldTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the world affine transform matrix. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks>Returns the world affine transform matrix. The matrix is in Pixels. </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfRunningActions">
      <MemberSignature Language="C#" Value="public int NumberOfRunningActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NumberOfRunningActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays).</summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays).&lt;/para&gt;&lt;para&gt;Composable actions are counted as 1 action. Example: If you are running 1 &lt;see cref="T:Cocos2D.CCSequence" /&gt; of 7 actions, it will return 1. If you are running 7 Sequences of 2 actions, it will return 7. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSequence" /&gt;&lt;para&gt;
  &lt;para&gt;The number of actions that are running plus the ones that are schedule to run &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;The number of actions that are running plus the ones that are schedule to run &lt;/para&gt;&lt;para&gt;The number of actions that are running plus the ones that are schedule to run &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="public virtual void OnEnter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time when  enters the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition starts. During onEnter you can't access a "sister/brother" node. If you override onEnter, you shall call its parent's one, e.g., Node::onEnter(). </summary>
        <remarks>&lt;para&gt;Event callback that is invoked every time when &lt;see cref="T:Cocos2D.CCNode" /&gt; enters the 'stage'. If the &lt;see cref="T:Cocos2D.CCNode" /&gt; enters the 'stage' with a transition, this event is called when the transition starts. During onEnter you can't access a "sister/brother" node. If you override onEnter, you shall call its parent's one, e.g., &lt;ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member"&gt;Node::onEnter()&lt;/ref&gt;. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;ref refid="classcocos2d_1_1_node_1a35211ff3db90acb4bca5d92edd6f3dde" kindref="member"&gt;Node::onEnter()&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnterTransitionDidFinish">
      <MemberSignature Language="C#" Value="public virtual void OnEnterTransitionDidFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnterTransitionDidFinish() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked when the  enters in the 'stage'. If the  enters the 'stage' with a transition, this event is called when the transition finishes. If you override onEnterTransitionDidFinish, you shall call its parent's one, e.g. Node::onEnterTransitionDidFinish()</summary>
        <remarks>&lt;para&gt;Event callback that is invoked when the &lt;see cref="T:Cocos2D.CCNode" /&gt; enters in the 'stage'. If the &lt;see cref="T:Cocos2D.CCNode" /&gt; enters the 'stage' with a transition, this event is called when the transition finishes. If you override onEnterTransitionDidFinish, you shall call its parent's one, e.g. &lt;ref refid="classcocos2d_1_1_node_1a7f705fa89d29ed4efda768865d1728d3" kindref="member"&gt;Node::onEnterTransitionDidFinish()&lt;/ref&gt;&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;ref refid="classcocos2d_1_1_node_1a7f705fa89d29ed4efda768865d1728d3" kindref="member"&gt;Node::onEnterTransitionDidFinish()&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExit">
      <MemberSignature Language="C#" Value="public virtual void OnExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is invoked every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this event is called when the transition finishes. During onExit you can't access a sibling node. If you override onExit, you shall call its parent's one, e.g., Node::onExit(). </summary>
        <remarks>&lt;para&gt;Event callback that is invoked every time the &lt;see cref="T:Cocos2D.CCNode" /&gt; leaves the 'stage'. If the &lt;see cref="T:Cocos2D.CCNode" /&gt; leaves the 'stage' with a transition, this event is called when the transition finishes. During onExit you can't access a sibling node. If you override onExit, you shall call its parent's one, e.g., &lt;ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member"&gt;Node::onExit()&lt;/ref&gt;. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;ref refid="classcocos2d_1_1_node_1a3a43c10832c787f6e2ca437c3ecc8dd3" kindref="member"&gt;Node::onExit()&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExitTransitionDidStart">
      <MemberSignature Language="C#" Value="public virtual void OnExitTransitionDidStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExitTransitionDidStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event callback that is called every time the  leaves the 'stage'. If the  leaves the 'stage' with a transition, this callback is called when the transition starts. </summary>
        <remarks>&lt;para&gt;Event callback that is called every time the &lt;see cref="T:Cocos2D.CCNode" /&gt; leaves the 'stage'. If the &lt;see cref="T:Cocos2D.CCNode" /&gt; leaves the 'stage' with a transition, this callback is called when the transition starts. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderOfArrival">
      <MemberSignature Language="C#" Value="public uint OrderOfArrival { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 OrderOfArrival" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the arrival order, indecates which children is added previously.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the arrival order, indecates which children is added previously.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member"&gt;setOrderOfArrival(unsigned int)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The arrival order. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member"&gt;setOrderOfArrival(unsigned int)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member"&gt;setOrderOfArrival(unsigned int)&lt;/ref&gt;&lt;para&gt;The arrival order. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga1d187df548d25d92730ea855aa25967c" kindref="member"&gt;setOrderOfArrival(unsigned int)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The arrival order. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Cocos2D.CCNode Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCNode Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a pointer to the parent node</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns a pointer to the parent node&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member"&gt;setParent(Node*)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;A pointer to the parnet node &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member"&gt;setParent(Node*)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member"&gt;setParent(Node*)&lt;/ref&gt;&lt;para&gt;A pointer to the parnet node &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gadceeec8b63df3f380be809bd12111890" kindref="member"&gt;setParent(Node*)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;A pointer to the parnet node &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentToNodeTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform ParentToNodeTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCAffineTransform ParentToNodeTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the matrix that transform parent's space coordinates to the node's (local) space coordinates. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks>Returns the matrix that transform parent's space coordinates to the node's (local) space coordinates. The matrix is in Pixels. </remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseSchedulerAndActions">
      <MemberSignature Language="C#" Value="public void PauseSchedulerAndActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PauseSchedulerAndActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses all scheduled selectors and actions. This method is called internally by onExit </summary>
        <remarks>Pauses all scheduled selectors and actions. This method is called internally by onExit </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual Cocos2D.CCPoint Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Cocos2D.CCPoint Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionX">
      <MemberSignature Language="C#" Value="public float PositionX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PositionX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets/Sets x or y coordinate individually for position. These methods are used in Lua and Javascript Bindings </summary>
        <value>To be added.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionY">
      <MemberSignature Language="C#" Value="public float PositionY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PositionY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all children from the container with a cleanup.</summary>
        <remarks>&lt;para&gt;Removes all children from the container with a cleanup.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1gaf79a48257a5d884d426ac561a1347897" kindref="member"&gt;removeAllChildrenWithCleanup(bool)&lt;/ref&gt;
  &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gaf79a48257a5d884d426ac561a1347897" kindref="member"&gt;removeAllChildrenWithCleanup(bool)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1gaf79a48257a5d884d426ac561a1347897" kindref="member"&gt;removeAllChildrenWithCleanup(bool)&lt;/ref&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gaf79a48257a5d884d426ac561a1347897" kindref="member"&gt;removeAllChildrenWithCleanup(bool)&lt;/ref&gt;
&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildrenWithCleanup">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllChildrenWithCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildrenWithCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">true if all running actions on all children nodes should be cleanup, false oterwise. </param>
        <summary>Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.</summary>
        <remarks>&lt;para&gt;Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions on all children nodes should be cleanup, false oterwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public void RemoveChild (Cocos2D.CCNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChild(class Cocos2D.CCNode child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
      </Parameters>
      <Docs>
        <param name="child">The child node which will be removed. </param>
        <summary>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</summary>
        <remarks>&lt;para&gt;Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The child node which will be removed. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The child node which will be removed. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The child node which will be removed. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The child node which will be removed. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public virtual void RemoveChild (Cocos2D.CCNode child, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveChild(class Cocos2D.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildByTag">
      <MemberSignature Language="C#" Value="public void RemoveChildByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChildByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">An interger number that identifies a child node </param>
        <summary>Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter</summary>
        <remarks>&lt;para&gt;Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;tag&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;An interger number that identifies a child node &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;tag&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;An interger number that identifies a child node &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;tag&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;tag&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;An interger number that identifies a child node &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;An interger number that identifies a child node &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all running actions and callbacks on the child node will be cleanup, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildByTag">
      <MemberSignature Language="C#" Value="public void RemoveChildByTag (int tag, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveChildByTag(int32 tag, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParent">
      <MemberSignature Language="C#" Value="public void RemoveFromParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromParent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes this node itself from its parent node with a cleanup. If the node orphan, then nothing happens. removeFromParentAndCleanup(bool)</summary>
        <remarks>&lt;para&gt;Removes this node itself from its parent node with a cleanup. If the node orphan, then nothing happens. &lt;para&gt;&lt;ref refid="group__base__nodes_1ga1e62b269bb704c9f72d4e4b83b213124" kindref="member"&gt;removeFromParentAndCleanup(bool)&lt;/ref&gt;&lt;/para&gt;&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga1e62b269bb704c9f72d4e4b83b213124" kindref="member"&gt;removeFromParentAndCleanup(bool)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga1e62b269bb704c9f72d4e4b83b213124" kindref="member"&gt;removeFromParentAndCleanup(bool)&lt;/ref&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga1e62b269bb704c9f72d4e4b83b213124" kindref="member"&gt;removeFromParentAndCleanup(bool)&lt;/ref&gt;
&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParentAndCleanup">
      <MemberSignature Language="C#" Value="public void RemoveFromParentAndCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromParentAndCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">true if all actions and callbacks on this node should be removed, false otherwise. </param>
        <summary>Removes this node itself from its parent node. If the node orphan, then nothing happens. </summary>
        <remarks>&lt;para&gt;Removes this node itself from its parent node. If the node orphan, then nothing happens. &lt;/para&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;cleanup&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if all actions and callbacks on this node should be removed, false otherwise. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;cleanup&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if all actions and callbacks on this node should be removed, false otherwise. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;cleanup&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;cleanup&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if all actions and callbacks on this node should be removed, false otherwise. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if all actions and callbacks on this node should be removed, false otherwise. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderChild">
      <MemberSignature Language="C#" Value="public virtual void ReorderChild (Cocos2D.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderChild(class Cocos2D.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">An already added child node. It MUST be already added. </param>
        <param name="zOrder">Z order for drawing priority. Please refer to setZOrder(int)setZOrder(int)</param>
        <summary>Reorders a child according to a new z value.</summary>
        <remarks>&lt;para&gt;Reorders a child according to a new z value.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;child&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;zOrder&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;child&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;child&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;child&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;An already added child node. It MUST be already added. &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;zOrder&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;zOrder&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;zOrder&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Z order for drawing priority. Please refer to &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeSchedulerAndActions">
      <MemberSignature Language="C#" Value="public void ResumeSchedulerAndActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeSchedulerAndActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resumes all scheduled selectors and actions. This method is called internally by onEnter </summary>
        <remarks>Resumes all scheduled selectors and actions. This method is called internally by onEnter </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public virtual float Rotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the rotation of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the rotation of the node in degrees.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga75d7d9854be663bfcdad47dadf9f093b" kindref="member"&gt;setRotation(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The rotation of the node in degrees. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga75d7d9854be663bfcdad47dadf9f093b" kindref="member"&gt;setRotation(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga75d7d9854be663bfcdad47dadf9f093b" kindref="member"&gt;setRotation(float)&lt;/ref&gt;&lt;para&gt;The rotation of the node in degrees. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga75d7d9854be663bfcdad47dadf9f093b" kindref="member"&gt;setRotation(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The rotation of the node in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationX">
      <MemberSignature Language="C#" Value="public virtual float RotationX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the X rotation (angle) of the node in degrees which performs a horizontal rotation skew.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Gets the X rotation (angle) of the node in degrees which performs a horizontal rotation skew.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member"&gt;setRotationX(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The X rotation in degrees. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member"&gt;setRotationX(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member"&gt;setRotationX(float)&lt;/ref&gt;&lt;para&gt;The X rotation in degrees. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga2dcac312f2d4bf25a2df8a6ec4fc9d1a" kindref="member"&gt;setRotationX(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The X rotation in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationY">
      <MemberSignature Language="C#" Value="public virtual float RotationY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Gets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member"&gt;setRotationY(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The Y rotation in degrees. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member"&gt;setRotationY(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member"&gt;setRotationY(float)&lt;/ref&gt;&lt;para&gt;The Y rotation in degrees. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga31a53afee009bf7f3a987b4f2134c96b" kindref="member"&gt;setRotationY(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The Y rotation in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunAction">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAction RunAction (Cocos2D.CCAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Cocos2D.CCAction RunAction(class Cocos2D.CCAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Cocos2D.CCAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>Executes an action, and returns the action that is executed.</summary>
        <returns>To be added.</returns>
        <remarks>&lt;para&gt;Executes an action, and returns the action that is executed.&lt;/para&gt;&lt;para&gt;This node becomes the action's target. Refer to Action::getTarget() &lt;para&gt;Actions don't retain their target.&lt;/para&gt;&lt;para&gt;An &lt;see cref="T:Cocos2D.CCAction" /&gt; pointer &lt;/para&gt;&lt;/para&gt;&lt;para&gt;Actions don't retain their target.&lt;/para&gt;&lt;para&gt;An &lt;see cref="T:Cocos2D.CCAction" /&gt; pointer &lt;/para&gt;&lt;see cref="T:Cocos2D.CCAction" /&gt;&lt;para&gt;Actions don't retain their target.&lt;/para&gt;&lt;para&gt;An &lt;see cref="T:Cocos2D.CCAction" /&gt; pointer &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual float Scale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the scale factor of the node, when X and Y have the same scale factor.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Gets the scale factor of the node, when X and Y have the same scale factor.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;Assert when _scaleX != _scaleY. &lt;/para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member"&gt;setScale(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The scale factor of the node. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;Assert when _scaleX != _scaleY. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member"&gt;setScale(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member"&gt;setScale(float)&lt;/ref&gt;&lt;para&gt;The scale factor of the node. &lt;/para&gt;&lt;para&gt;Assert when _scaleX != _scaleY. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gabd615be9ab54d95aa86af15db18a1004" kindref="member"&gt;setScale(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The scale factor of the node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleX">
      <MemberSignature Language="C#" Value="public virtual float ScaleX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scale factor on X axis of this node</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the scale factor on X axis of this node&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member"&gt;setScaleX(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The scale factor on X axis. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member"&gt;setScaleX(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member"&gt;setScaleX(float)&lt;/ref&gt;&lt;para&gt;The scale factor on X axis. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga299d23df4398fe70565a6114bfacedc4" kindref="member"&gt;setScaleX(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The scale factor on X axis. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleY">
      <MemberSignature Language="C#" Value="public virtual float ScaleY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scale factor on Y axis of this node</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the scale factor on Y axis of this node&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member"&gt;setScaleY(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The scale factor on Y axis. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member"&gt;setScaleY(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member"&gt;setScaleY(float)&lt;/ref&gt;&lt;para&gt;The scale factor on Y axis. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga0aba6f7e11dc4a4571e5f95130c7adc3" kindref="member"&gt;setScaleY(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The scale factor on Y axis. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <summary>Schedules a custom selector, the scheduled selector will be ticked every frame schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks>&lt;para&gt;Schedules a custom selector, the scheduled selector will be ticked every frame &lt;para&gt;&lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;&lt;/para&gt;&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;selector&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;selector&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;selector&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;selector&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A function wrapped as a selector &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;
&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector, float interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector, float32 interval) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="interval" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="interval">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; selector, float interval, uint repeat, float delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; selector, float32 interval, unsigned int32 repeat, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="interval" Type="System.Single" />
        <Parameter Name="repeat" Type="System.UInt32" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="interval">To be added.</param>
        <param name="repeat">To be added.</param>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleOnce">
      <MemberSignature Language="C#" Value="public void ScheduleOnce (Action&lt;float&gt; selector, float delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleOnce(class System.Action`1&lt;float32&gt; selector, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <param name="delay">The amount of time that the first tick will wait before execution. </param>
        <summary>Schedules a selector that runs only once, with a delay of 0 or larger schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks>&lt;para&gt;Schedules a selector that runs only once, with a delay of 0 or larger &lt;para&gt;&lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;&lt;/para&gt;&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;selector&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;delay&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;The amount of time that the first tick will wait before execution. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;selector&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;selector&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;selector&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A function wrapped as a selector &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;delay&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;The amount of time that the first tick will wait before execution. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;delay&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;delay&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;The amount of time that the first tick will wait before execution. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;The amount of time that the first tick will wait before execution. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;
&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public Cocos2D.CCScheduler Scheduler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Cocos2D.CCScheduler Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Sheduler object.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Gets a Sheduler object.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="classcocos2d_1_1_node_1af298cb47edf3f8dcd53d1476e5f9ba8b" kindref="member"&gt;setScheduler(Scheduler*)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;A &lt;see cref="T:Cocos2D.CCScheduler" /&gt; object. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1af298cb47edf3f8dcd53d1476e5f9ba8b" kindref="member"&gt;setScheduler(Scheduler*)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="classcocos2d_1_1_node_1af298cb47edf3f8dcd53d1476e5f9ba8b" kindref="member"&gt;setScheduler(Scheduler*)&lt;/ref&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCScheduler" /&gt; object. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCScheduler" /&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1af298cb47edf3f8dcd53d1476e5f9ba8b" kindref="member"&gt;setScheduler(Scheduler*)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;A &lt;see cref="T:Cocos2D.CCScheduler" /&gt; object. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleUpdate">
      <MemberSignature Language="C#" Value="public void ScheduleUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schedules the "update" method.</summary>
        <remarks>&lt;para&gt;Schedules the "update" method.&lt;/para&gt;&lt;para&gt;It will use the order number 0. This method will be called every frame. Scheduled methods with a lower order value will be called before the ones that have a higher order value. Only one "update" method could be scheduled per node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleUpdateWithPriority">
      <MemberSignature Language="C#" Value="public void ScheduleUpdateWithPriority (int priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleUpdateWithPriority(int32 priority) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="priority">To be added.</param>
        <summary>Schedules the "update" method with a custom priority.</summary>
        <remarks>&lt;para&gt;Schedules the "update" method with a custom priority.&lt;/para&gt;&lt;para&gt;This selector will be called every frame. Scheduled methods with a lower priority will be called before the ones that have a higher value. Only one "update" selector could be scheduled per node (You can't have 2 'update' selectors). &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual void Serialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Serialize(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPosition">
      <MemberSignature Language="C#" Value="public void SetPosition (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPosition(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">X coordinate for position </param>
        <param name="y">Y coordinate for position </param>
        <summary>Sets position in a more efficient way.</summary>
        <remarks>&lt;para&gt;Sets position in a more efficient way.&lt;/para&gt;&lt;para&gt;Passing two numbers (x,y) is much efficient than passing Point object. This method is binded to lua and javascript. Passing a number is 10 times faster than passing a object from lua to c++&lt;/para&gt;&lt;para&gt;
  &lt;programlisting&gt;
    &lt;codeline&gt;
      &lt;highlight class="comment"&gt;//&lt;sp /&gt;sample&lt;sp /&gt;code&lt;sp /&gt;in&lt;sp /&gt;lua&lt;/highlight&gt;
      &lt;highlight class="normal"&gt;&lt;/highlight&gt;
    &lt;/codeline&gt;
    &lt;codeline&gt;
      &lt;highlight class="normal"&gt;local&lt;sp /&gt;pos&lt;sp /&gt;&lt;sp /&gt;=&lt;sp /&gt;node::getPosition()&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;returns&lt;sp /&gt;Point&lt;sp /&gt;&lt;/highlight&gt;
      &lt;highlight class="keywordtype"&gt;object&lt;/highlight&gt;
      &lt;highlight class="normal"&gt;
        &lt;sp /&gt;from&lt;sp /&gt;C++&lt;/highlight&gt;
    &lt;/codeline&gt;
    &lt;codeline&gt;
      &lt;highlight class="normal"&gt;node:&lt;ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member"&gt;setPosition&lt;/ref&gt;(x,&lt;sp /&gt;y)&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;pass&lt;sp /&gt;x,&lt;sp /&gt;y&lt;sp /&gt;coordinate&lt;sp /&gt;to&lt;sp /&gt;C++&lt;/highlight&gt;
    &lt;/codeline&gt;
  &lt;/programlisting&gt;
&lt;/para&gt;&lt;programlisting&gt;
  &lt;codeline&gt;
    &lt;highlight class="comment"&gt;//&lt;sp /&gt;sample&lt;sp /&gt;code&lt;sp /&gt;in&lt;sp /&gt;lua&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;local&lt;sp /&gt;pos&lt;sp /&gt;&lt;sp /&gt;=&lt;sp /&gt;node::getPosition()&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;returns&lt;sp /&gt;Point&lt;sp /&gt;&lt;/highlight&gt;
    &lt;highlight class="keywordtype"&gt;object&lt;/highlight&gt;
    &lt;highlight class="normal"&gt;
      &lt;sp /&gt;from&lt;sp /&gt;C++&lt;/highlight&gt;
  &lt;/codeline&gt;
  &lt;codeline&gt;
    &lt;highlight class="normal"&gt;node:&lt;ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member"&gt;setPosition&lt;/ref&gt;(x,&lt;sp /&gt;y)&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;pass&lt;sp /&gt;x,&lt;sp /&gt;y&lt;sp /&gt;coordinate&lt;sp /&gt;to&lt;sp /&gt;C++&lt;/highlight&gt;
  &lt;/codeline&gt;
&lt;/programlisting&gt;&lt;codeline&gt;
  &lt;highlight class="comment"&gt;//&lt;sp /&gt;sample&lt;sp /&gt;code&lt;sp /&gt;in&lt;sp /&gt;lua&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="comment"&gt;//&lt;sp /&gt;sample&lt;sp /&gt;code&lt;sp /&gt;in&lt;sp /&gt;lua&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="normal"&gt;&lt;/highlight&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;local&lt;sp /&gt;pos&lt;sp /&gt;&lt;sp /&gt;=&lt;sp /&gt;node::getPosition()&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;returns&lt;sp /&gt;Point&lt;sp /&gt;&lt;/highlight&gt;
  &lt;highlight class="keywordtype"&gt;object&lt;/highlight&gt;
  &lt;highlight class="normal"&gt;
    &lt;sp /&gt;from&lt;sp /&gt;C++&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;local&lt;sp /&gt;pos&lt;sp /&gt;&lt;sp /&gt;=&lt;sp /&gt;node::getPosition()&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;returns&lt;sp /&gt;Point&lt;sp /&gt;&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;highlight class="keywordtype"&gt;object&lt;/highlight&gt;&lt;highlight class="normal"&gt;
  &lt;sp /&gt;from&lt;sp /&gt;C++&lt;/highlight&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;codeline&gt;
  &lt;highlight class="normal"&gt;node:&lt;ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member"&gt;setPosition&lt;/ref&gt;(x,&lt;sp /&gt;y)&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;pass&lt;sp /&gt;x,&lt;sp /&gt;y&lt;sp /&gt;coordinate&lt;sp /&gt;to&lt;sp /&gt;C++&lt;/highlight&gt;
&lt;/codeline&gt;&lt;highlight class="normal"&gt;node:&lt;ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member"&gt;setPosition&lt;/ref&gt;(x,&lt;sp /&gt;y)&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;--&lt;sp /&gt;pass&lt;sp /&gt;x,&lt;sp /&gt;y&lt;sp /&gt;coordinate&lt;sp /&gt;to&lt;sp /&gt;C++&lt;/highlight&gt;&lt;ref refid="group__base__nodes_1ga17a8d67637ccd77b900ceb0b72331fb0" kindref="member"&gt;setPosition&lt;/ref&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;sp /&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;x&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;X coordinate for position &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;y&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;Y coordinate for position &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;x&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;X coordinate for position &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;x&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;x&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;X coordinate for position &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;X coordinate for position &lt;/para&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;y&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;Y coordinate for position &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;y&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;y&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;Y coordinate for position &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;Y coordinate for position &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewX">
      <MemberSignature Language="C#" Value="public virtual float SkewX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the X skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the X skew angle of the node in degrees.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member"&gt;setSkewX(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The X skew angle of the node in degrees. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member"&gt;setSkewX(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member"&gt;setSkewX(float)&lt;/ref&gt;&lt;para&gt;The X skew angle of the node in degrees. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga039df593f18d11eac2a1cfd0540e1637" kindref="member"&gt;setSkewX(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The X skew angle of the node in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewY">
      <MemberSignature Language="C#" Value="public virtual float SkewY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Y skew angle of the node in degrees.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns the Y skew angle of the node in degrees.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member"&gt;setSkewY(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The Y skew angle of the node in degrees. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member"&gt;setSkewY(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member"&gt;setSkewY(float)&lt;/ref&gt;&lt;para&gt;The Y skew angle of the node in degrees. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga71af993e7f85a92fb624c00a379e38e0" kindref="member"&gt;setSkewY(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The Y skew angle of the node in degrees. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SortAllChildren">
      <MemberSignature Language="C#" Value="public virtual void SortAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SortAllChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the children array once before drawing, instead of every time when a child is added or reordered. This appraoch can improves the performance massively. Don't call this manually unless a child added needs to be removed in the same frame </summary>
        <remarks>&lt;para&gt;Sorts the children array once before drawing, instead of every time when a child is added or reordered. This appraoch can improves the performance massively. &lt;para&gt;Don't call this manually unless a child added needs to be removed in the same frame &lt;/para&gt;&lt;/para&gt;&lt;para&gt;Don't call this manually unless a child added needs to be removed in the same frame &lt;/para&gt;&lt;para&gt;Don't call this manually unless a child added needs to be removed in the same frame &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAction">
      <MemberSignature Language="C#" Value="public void StopAction (Cocos2D.CCAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopAction(class Cocos2D.CCAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Cocos2D.CCAction" />
      </Parameters>
      <Docs>
        <param name="action">action object to be removed. </param>
        <summary>Stops and removes an action from the running action list.</summary>
        <remarks>&lt;para&gt;Stops and removes an action from the running action list.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;An&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;action object to be removed. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;An&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;action object to be removed. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;An&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;An&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;action object to be removed. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;action object to be removed. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActionByTag">
      <MemberSignature Language="C#" Value="public void StopActionByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActionByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">tag that indicates the action to be removed. </param>
        <summary>Removes an action from the running action list by its tag.</summary>
        <remarks>&lt;para&gt;Removes an action from the running action list by its tag.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;A&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;tag that indicates the action to be removed. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;A&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;tag that indicates the action to be removed. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;A&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;A&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;tag that indicates the action to be removed. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;tag that indicates the action to be removed. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAllActions">
      <MemberSignature Language="C#" Value="public void StopAllActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopAllActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops and removes all actions from the running action list . </summary>
        <remarks>Stops and removes all actions from the running action list . </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public int Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Changes the tag that is used to identify the node easily.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Changes the tag that is used to identify the node easily.&lt;/para&gt;&lt;para&gt;Please refer to getTag for the sample code.&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;A&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;interger that indentifies the node. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;A&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;interger that indentifies the node. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;A&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;A&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;interger that indentifies the node. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;interger that indentifies the node. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs OpenGL view-matrix transformation based on position, scale, rotation and other attributes. </summary>
        <remarks>Performs OpenGL view-matrix transformation based on position, scale, rotation and other attributes. </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformAncestors">
      <MemberSignature Language="C#" Value="public void TransformAncestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformAncestors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs OpenGL view-matrix transformation of it's ancestors. Generally the ancestors are already transformed, but in certain cases (eg: attaching a FBO) It's necessary to transform the ancestors again. </summary>
        <remarks>Performs OpenGL view-matrix transformation of it's ancestors. Generally the ancestors are already transformed, but in certain cases (eg: attaching a FBO) It's necessary to transform the ancestors again. </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public void Unschedule (Action&lt;float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unschedule(class System.Action`1&lt;float32&gt; selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="System.Action&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="selector">A function wrapped as a selector </param>
        <summary>Unschedules a custom selector. schedule(SEL_SCHEDULE, float, unsigned int, float)</summary>
        <remarks>&lt;para&gt;Unschedules a custom selector. &lt;para&gt;&lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;&lt;/para&gt;&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;selector&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;selector&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;selector&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;selector&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;A function wrapped as a selector &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;A function wrapped as a selector &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="classcocos2d_1_1_node_1a253b1c9902244fc65e7779751d4b752e" kindref="member"&gt;schedule(SEL_SCHEDULE, float, unsigned int, float)&lt;/ref&gt;
&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnscheduleAllSelectors">
      <MemberSignature Language="C#" Value="public void UnscheduleAllSelectors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnscheduleAllSelectors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unschedule all scheduled selectors: custom selectors, and the 'update' selector. Actions are not affected by this method. </summary>
        <remarks>Unschedule all scheduled selectors: custom selectors, and the 'update' selector. Actions are not affected by this method. </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnscheduleUpdate">
      <MemberSignature Language="C#" Value="public void UnscheduleUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnscheduleUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (float dt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float32 dt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dt" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dt">To be added.</param>
        <summary>To be added.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTransform">
      <MemberSignature Language="C#" Value="public virtual void UpdateTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls children's updateTransform() method recursively.</summary>
        <remarks>&lt;para&gt;Calls children's &lt;ref refid="classcocos2d_1_1_node_1a36c8969b2ac4c489092729363ee496cd" kindref="member"&gt;updateTransform()&lt;/ref&gt; method recursively.&lt;/para&gt;&lt;ref refid="classcocos2d_1_1_node_1a36c8969b2ac4c489092729363ee496cd" kindref="member"&gt;updateTransform()&lt;/ref&gt;&lt;para&gt;This method is moved from &lt;see cref="T:Cocos2D.CCSprite" /&gt;, so it's no longer specific to &lt;see cref="T:Cocos2D.CCSprite" /&gt;. As the result, you apply &lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;'s optimization on your customed &lt;see cref="T:Cocos2D.CCNode" /&gt;. e.g., batchNode-&amp;gt;addChild(myCustomNode), while you can only addChild(sprite) before. &lt;/para&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;&lt;see cref="T:Cocos2D.CCSprite" /&gt;&lt;see cref="T:Cocos2D.CCSpriteBatchNode" /&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserData">
      <MemberSignature Language="C#" Value="public object UserData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets a custom user data pointer</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets a custom user data pointer&lt;/para&gt;&lt;para&gt;You can set everything in UserData pointer, a data block, a structure or an object, etc. &lt;para&gt;Don't forget to release the memroy manually, especially before you change this data pointer, and before this node is autoreleased.&lt;/para&gt;&lt;/para&gt;&lt;para&gt;Don't forget to release the memroy manually, especially before you change this data pointer, and before this node is autoreleased.&lt;/para&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;A&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;custom user data pointer &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;A&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;custom user data pointer &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;A&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;A&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;custom user data pointer &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;custom user data pointer &lt;/para&gt;&lt;para&gt;Don't forget to release the memroy manually, especially before you change this data pointer, and before this node is autoreleased.&lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserObject">
      <MemberSignature Language="C#" Value="public object UserObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a user assigned Object</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Returns a user assigned Object&lt;/para&gt;&lt;para&gt;Similar to UserData, but instead of holding a void* it holds an object. The UserObject will be retained once in this method, and the previous UserObject (if existed) will be relese. The UserObject will be released in &lt;see cref="T:Cocos2D.CCNode" /&gt;'s destructure.&lt;/para&gt;&lt;see cref="T:Cocos2D.CCNode" /&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;A&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;user assigned Object &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;A&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;user assigned Object &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;A&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;A&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;user assigned Object &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;user assigned Object &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexZ">
      <MemberSignature Language="C#" Value="public virtual float VertexZ { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 VertexZ" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets OpenGL Z vertex of this node.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Gets OpenGL Z vertex of this node.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1gaaabfa28f96e520e204c68900aa8e94fa" kindref="member"&gt;setVertexZ(float)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;OpenGL Z vertex of this node &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gaaabfa28f96e520e204c68900aa8e94fa" kindref="member"&gt;setVertexZ(float)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1gaaabfa28f96e520e204c68900aa8e94fa" kindref="member"&gt;setVertexZ(float)&lt;/ref&gt;&lt;para&gt;OpenGL Z vertex of this node &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1gaaabfa28f96e520e204c68900aa8e94fa" kindref="member"&gt;setVertexZ(float)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;OpenGL Z vertex of this node &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets whether the node is visible</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Sets whether the node is visible&lt;/para&gt;&lt;para&gt;The default value is true, a node is default to visible&lt;/para&gt;&lt;para /&gt;&lt;parameterlist kind="param"&gt;
  &lt;parameteritem&gt;
    &lt;parameternamelist&gt;
      &lt;parametername&gt;visible&lt;/parametername&gt;
    &lt;/parameternamelist&gt;
    &lt;parameterdescription&gt;
      &lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;
    &lt;/parameterdescription&gt;
  &lt;/parameteritem&gt;
&lt;/parameterlist&gt;&lt;parameteritem&gt;
  &lt;parameternamelist&gt;
    &lt;parametername&gt;visible&lt;/parametername&gt;
  &lt;/parameternamelist&gt;
  &lt;parameterdescription&gt;
    &lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;
  &lt;/parameterdescription&gt;
&lt;/parameteritem&gt;&lt;parameternamelist&gt;
  &lt;parametername&gt;visible&lt;/parametername&gt;
&lt;/parameternamelist&gt;&lt;parametername&gt;visible&lt;/parametername&gt;&lt;parameterdescription&gt;
  &lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;
&lt;/parameterdescription&gt;&lt;para&gt;true if the node is visible, false if the node is hidden. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visits this node's children and draw them recursively. </summary>
        <remarks>Visits this node's children and draw them recursively. </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorldToNodeTransform">
      <MemberSignature Language="C#" Value="public Cocos2D.CCAffineTransform WorldToNodeTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Cocos2D.CCAffineTransform WorldToNodeTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cocos2D.CCAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the inverse world affine transform matrix. The matrix is in Pixels. </summary>
        <returns>To be added.</returns>
        <remarks>Returns the inverse world affine transform matrix. The matrix is in Pixels. </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZOrder">
      <MemberSignature Language="C#" Value="public int ZOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ZOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Z order of this node.</summary>
        <value>To be added.</value>
        <remarks>&lt;para&gt;Gets the Z order of this node.&lt;/para&gt;&lt;para&gt;
  &lt;para&gt;
    &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;
  &lt;/para&gt;
  &lt;para&gt;The Z order. &lt;/para&gt;
&lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;
&lt;/para&gt;&lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;&lt;para&gt;The Z order. &lt;/para&gt;&lt;para&gt;
  &lt;ref refid="group__base__nodes_1ga8349948f38f20b24737e579a22553756" kindref="member"&gt;setZOrder(int)&lt;/ref&gt;
&lt;/para&gt;&lt;para&gt;The Z order. &lt;/para&gt;</remarks>
      </Docs>
    </Member>
  </Members>
</Type>